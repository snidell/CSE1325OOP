Script started on Fri 21 Mar 2014 12:57:06 PM CDT
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Accountant.java
/*************************************************************************
 *  Compilation:  javac Accountant.java <br>
 *  Execution:    java Accountant <br>
 *************************************************************************/

/**
 * A simple data type Accountant for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating Accountant objects to hold employee info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
public class Accountant extends SalariedEmp{ 
   
   double hourlyRate;
   private NumberFormat dollars= NumberFormat.getCurrencyInstance(Locale.US);
  
  Accountant(String fn,String ln, Date db, String gender, Date hd, String rd,double base, double hr){
    
    super(fn,ln,db,gender,hd,rd,base); //Salaried will build then Person will build from salaried
    hourlyRate=hr;    
  }
  
  /**
  * Overrides abvstract method in SalariedEmployee to calculate salary
  * 
  * @return age of current person       
  */
  public String computeSalary(int numHours){
    String dollarCost=dollars.format(basePay+hourlyRate*numHours);
    
    return dollarCost;
  }
  /**
  * Overrides objects String method
  * 
  * @return String Represdent     
  */  
  public String toString(){    
   
   return "Accountant->"+firstName+" "+lastName+" Birthdate: "+dob+" Gender:"+gender+" ID: "+id+" HireDate: "+
     hireDate+" Release Date: "+releaseDate+" basePay: "+basePay;   
 }
  public String printCalc(int month){    
   
   return "    ID: "+id+"|Emp Type: Accountant |"+" First Name: "+firstName+" Last "+lastName+"|Gender: "+gender
     +" Month: "+month; 
 }
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Bid.java
/*************************************************************************
 *  Compilation:  javac Bid.java <br>
 *  Execution:    java Bid <br>
 *************************************************************************/

/**
 * A simple data type Item for use in Project 2 (CSE 1325, Fall 2010)
 * <br>
 * Useful for creating Bid objects to hold Infromation of a Bid
 * user, item, bid Amount
 * 
 * @author Scott Nidell 
 */

import java.math.*;
import java.text.*;
import java.util.*;

public class Bid implements Proj3Constants,DateConstants{
  
  private int userID;
  private int itemID;
  private DateTime bidDate;
  private double bidAmount;
  private int bidQTY;
  private DecimalFormat three= new DecimalFormat("#000");
  
  
  
  /**
  * Constructor: Creates a bidding object
  * 
  * @param uID         User ID who is bidding
  * @param iID         Item id that the bid belongs to
  * @param bidDate     Date the bid was placed
  * @param bidAmt      Amount the bid will be placed for
  * @param qty         Quanity of items to be bid on
  * @exception RuntimeException
  *                if the date is invalid
  */
  public Bid(int uID,int iID, DateTime bidDate, double bidAmt,int qty){
    
    this.userID=uID;
    this.itemID=iID;
    this.bidDate= bidDate;
    this.bidAmount=bidAmt;
    this.bidQTY=qty;      
  }
  
  
  /**
  * Getter for itemID
  * 
  * @return int itemIDs
  */
  public int getItemID(){
   
    return this.itemID;
  }  
  
  /**
  * Getter for BidAmount
  * 
  * @return double current bid amount
  */
  public double getBidAmount(){
   
    return this.bidAmount;
  }
  
  /**
  * Getter bid quanity
  * 
  * @return int quanity of bid
  */
  public int getBidQty(){
    
    return this.bidQTY;
  }
  
  /**
  * Getter for bid date
  * 
  * @return DateTime of the bid that is trying to be placed
  */
  public DateTime getBidDate(){
   
    return this.bidDate;
  }
  
  
  /**
  * Getter for bid year
  * 
  * @return returns year of bid
  */
  public int getYear(){
    
    return bidDate.getYear();
  }
  
  /**
  * Getter for bid amount
  * 
  * @return bid amount
  */
  public double getAmount(){
    
    return this.bidAmount;
  }
  
  public int getQuantity(){
   return this.bidQTY;
  }
    
  
  /**
  * Overloaded toString method
  * 
  * @return String that represents a bidding object
  */
  public String toString(){
    
    String formatID=three.format(this.userID);
   
    return "UserID: "+formatID+"|ItemID: "+itemID+"|Bid Date: "+this.bidDate+"|Bid Amount: "
      +this.bidAmount+"|Bid QTY: "+this.bidQTY;
  }
  
  public static void main(String []args){
    
  /********Various test cases******/
    int userID1=011;
  int itemID1=100;
  DateTime bidDate1= new DateTime("2-12-2014,00:00:45");
  double bidAmount1=200.00;
  int bidQTY1= 3;
  
  int userID2=012;
  int itemID2=120;
  DateTime bidDate2= new DateTime("2-13-2014,13:45:00");
  double bidAmount2=203.00;
  int bidQTY2= 3;
  
  int userID3=013;
  int itemID3=110;
  DateTime bidDate3= new DateTime("2-11-2014,11:00:00");
  double bidAmount3=900.00;
  int bidQTY3= 1;
  
  int userID4=014;
  int itemID4=190;
  DateTime bidDate4= new DateTime("2-11-2014,14:00:00");
  double bidAmount4=233.00;
  int bidQTY4= 9;
  
  Bid bid1= new Bid(userID1,itemID1,bidDate1,bidAmount1,bidQTY1);
  Bid bid2= new Bid(userID2,itemID2,bidDate2,bidAmount2,bidQTY2);
  Bid bid3= new Bid(userID3,itemID3,bidDate3,bidAmount3,bidQTY3);
  Bid bid4= new Bid(userID4,itemID4,bidDate4,bidAmount4,bidQTY4);
  
  System.out.println(bid1);
  System.out.println(bid2);
  System.out.println(bid3);
  System.out.println(bid4);
  

    
    
  }
  
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat CSupport.java
/*************************************************************************
 *  Compilation:  javac CSupport.java <br>
 *  Execution:    java CSupport <br>
 *************************************************************************/

/**
 * A simple data type CSupport for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating CSupport objects to hold employee info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
public class CSupport extends SalariedEmp{ 
  
   double minsRate;
   private NumberFormat dollars= NumberFormat.getCurrencyInstance(Locale.US);
  
  CSupport(String fn,String ln, Date db, String gender, Date hd, String rd,double base, double mr){
    
    super(fn,ln,db,gender,hd,rd,base); //Salaried will build then Person will build from salaried
    minsRate=mr;    
  }
  
  /**
  * Overrides abvstract method in SalariedEmployee to calculate salary
  * 
  * @return age of current person       
  */
  public String computeSalary(int timeOnPhone){
    String dollarCost=dollars.format(basePay+minsRate*timeOnPhone);
    
    return dollarCost; //basePay declared in Superclass Inheritance at work.
  }
  
  /**
  * Overrides objects String method
  * 
  * @return String Represents CSupport    
  */
  public String toString(){    
   
   return "Customer Support->"+firstName+" "+lastName+" Birthdate: "+dob+" Gender:"+gender+" ID: "+id+" HireDate: "+
     hireDate+" Release Date: "+releaseDate+" basePay: "+basePay;   
 }
  public String printCalc(int month){    
   
   return "    ID: "+id+"|Emp Type: CSupport |"+" First Name: "+firstName+" Last "+lastName+"|Gender: "+gender
     +" Month: "+month;  
 }
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Customer.java
/*************************************************************************
 *  Compilation:  javac Customer.java <br>
 *  Execution:    java Customer <br>
 *************************************************************************/

/**
 * A simple data type Customer for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating Customer objects to hold customer info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
import java.math.*;
import java.text.*;
import java.util.*;
public class Customer extends Person{       
    
    private enum Status{GOLD,SILVER};
    private enum Classification{SELLER,BUYER,BOTH};
    private int userID;
    private String address;
    private String zip;
    private String state;    
    private Status status;
    private Classification classification;
    private DecimalFormat three= new DecimalFormat("#000");    
    
    public Customer(int id,String firstName,String lastName,Date db,String gender, String ad,
                                              String st, String z) {
        super(firstName, lastName, gender,db);
        userID = id;
        address=ad;
        state=st;
        zip=z;
        status=status.SILVER;
        classification= classification.BOTH;
    }  
    
    /**
     * Change the address of the customer
     * 
     * @param newAddr the new address to be changed           
     */
   public void changeAddress(String newAddr){
   
   this.address=newAddr;
   }
 
   /**
    * Change the zip code of customer
    * 
    * @param newZip the Zipcode to change to         
    */
  public void changeZip(String newZip){
   
   this.zip=newZip;
  }
  
  /**
  * Change Silver/Gold status
  * 
  *       
  */
 public void changeStatus(){
   if(this.status.equals(Status.SILVER)){
    this.status=Status.GOLD;
   }else if(this.status.equals(Status.GOLD)){
    this.status=Status.SILVER;
   }
 }
 
 /**
  * Change seller buyer class
  * 
  * @param newClass String representation of new class    
  */
 public void changeClass(String newClass){
   
   if(newClass.toLowerCase().equals(BUYERCLASS)){
     this.classification = Classification.BUYER;
   }else if(newClass.equals(SELLERCLASS)){
     this.classification = Classification.SELLER;
   }else if(newClass.equals(BOTHCLASS))
     this.classification = Classification.BOTH;
   else
     System.out.println("Invalid selection");
 }
 /**
  * Get the Customer ID
  *      
  */
 public int getID(){
  return this.userID;   
 }
 
 /**
  * Change seller buyer class
  * @override overrides Person which overrides Object
  * @return String that represents a Customer Object   
  */
 public String toString(){  
   
  String customerIDF= three.format(this.userID);
   
   return "{ UserID: "+customerIDF+"| Name: "+super.firstName+" "+super.lastName+"| D.O.B.: "+super.dob+
     "| Address: "+ this.address+" "+this.zip+"| Sales Status: "+this.status+
     "| Customer Class: "+this.classification+" }";   
 }
 
 /**
  * Compares current date to date of birth and gets age of person
  * 
  * @return age of current person       
  */
 public int age(){
   int age=0;
   Date today= new Date();
   age= (dob.daysBetween(today))/DAY_YEAR;
   return age;
 }
 public static void main(String args []){
   
   
   
   Date date1= new Date(8,28,1983);
   Customer cust1= new Customer(47,"Scott","Nidell",date1,"male","5316 Stephanie Drive","Texas","76117");
   System.out.println(cust1);
   
   Date date2= new Date(11,3,1988);
   //Person p1= new Person("Sookie","Stackhouse","Female",date2); //should error out can instantiate abstract class
   //System.out.println(p1);
 }
 
  
 
       
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Date.java
/*************************************************************************
 *  Compilation:  javac Date.java <br>
 *  Execution:    java Date <br>
 *************************************************************************/

/**
 * A simple data type Date for use in Project 2 (CSE 1325, Fall 2010)
 * <br>
 * Useful for creating Date objects to hold calendar date
 * 
 * @author Sharma Chakravarhty (Extended Robert Sedgewick and Kevin Wayne code,
 *         Copyright 2007)
 * @author extended by Yuanzhe Cai (10/8/2010)
 * @see java.util.Calendar
 * @since 02/13/2010 Fixed a logical error/bug for addMonths on 2/22/2010 (Cai)
 * @since 08/2012 Fixed a logical error in the constructor with m and y (sharma)
 * @since 08/2012 Fixed a logical error in the methid addMonths (sharma)
 * @since 09/2012  fixed bugs in Date (m, y) and daysBetween (sharma)
 * @since 01/2014 revised to make it mutable
 */

import java.util.Calendar;
import java.util.GregorianCalendar;

public class Date implements DateConstants {

 private static final int[] DAYS = { 0, 31, 29, 31, 30, 31, 30, 31, 31,
   30, 31, 30, 31 };
        private static final int LEAP_YEAR = 366;
        private static final int NON_LEAP_YEAR = 365;

 private int month; // month (between 1 and 12)
 private int day; // day (between 1 and DAYS[month])
 private int year; // year

/**
  * Constructor: default; returns today's date
  */
    public Date() {
        GregorianCalendar c = new GregorianCalendar();
        month = c.get(Calendar.MONTH)+1;  //our month starts from 1
        day = c.get(Calendar.DAY_OF_MONTH);
        year = c.get(Calendar.YEAR);
    }

 /**
  * Constructor: Does bounds-checking to ensure object represents a valid
  * date
  * 
  * @param m    represents the month between 1 and 12
  * @param d    represents the date between 1 and the corresponding number
  *             from array DAYS
  * @param y    represents the year
  * @exception RuntimeException
  *                if the date is invalid
  */
 public Date(int m, int d, int y) {
  if (!isValid(m, d, y))
   throw new RuntimeException("Date 1: Invalid date, incorrect input"  + m + ":" + d + ":" + y);
  this.month = m;
  this.day = d;
  this.year = y;
 }

 /**
  * Constructor: Does bounds-checking to ensure string represents a valid
  * date
  * 
  * @param sDate    represents a date given in format mm-dd-yyyy as a string
  * @exception RuntimeException if the date is invalid
  */
 public Date(String sDate) {
  int m, d, y;
  String[] chopDate = sDate.split("-");
  m = Integer.parseInt(chopDate[ZEROI]);
  d = Integer.parseInt(chopDate[ONEI]);
  y = Integer.parseInt(chopDate[TWOI]);
  if (!isValid(m, d, y))
   throw new RuntimeException("Date 2:Invalid date: correct input" + m + "-" + d + "-" + y);
  month = m;
  day = d;
  year = y;
 }

 /**
  * constructor:    creates a date with a given year; fills in valid last 
     * month and day;
  * 
  * @param y    represents a date for a  year supplied as an integer
  */
 public Date(int y) {

  month = LAST_MONTH;
  day = DAYS[LAST_MONTH];
  year = y;
 }

 /**
  * create a date with a given month and year; fills in valid day;
  * 
  * @param m    represents the month between 1 and 12
  * @param y    represents the year
  * @exception  RuntimeException if the date is invalid
  */
 public Date(int m, int y) {

  if (m < FIRST_MONTH || m > LAST_MONTH) throw new RuntimeException("Date 3:Invalid date; correct input" + m + ":" + y);
        else month = m;
  if (!isLeapYear(y) && m == FEB) day = DAYS[m]-1;
        else day = DAYS[m];
        year = y;
        if (!isValid(month, day, year))
   throw new RuntimeException("4::Invalid date; correct input" + m + ":" + y);
 }

 /**
  * Is the given date valid?
  * 
  * @param month, day, and year
  * @return false if month exceeds 12 or is less than 1
  * @return false if day exceeds the corresponding days for a month from
  *         array DAYS
  * @return false if the year is not a leap year and has 29 days
  */
 private static boolean isValid(int m, int d, int y) {
  if (y < 0) return false; //will not handle negative years!
        if (m < FIRST_MONTH || m > LAST_MONTH)
   return false;
  if (d < FIRST_DAY || d > DAYS[m])
   return false;
  if (m == FEB && d == DAYS[FEB] && !isLeapYear(y))
   return false;
  return true;
 }

 public int getMonth(){
    return month;
  }
 
 public int getYear(){
   return year;
  }
 public int getDay(){
   return day;
 }
        
        /**
  * is y a leap year?
  * 
  * @param y
  *            represents the year specified
  * @return true if year divisible by 400
  * @return false if year divisible by 100 and not by 400
  */
 private static boolean isLeapYear(int y) {
  if (y % 400 == 0)
   return true;
  if (y % 100 == 0)
   return false;
  return (y % 4 == 0);
 }

 /**
  * does a given date belong to the given year y ?
  * 
  * @param y
  *            represents the year specified
  * @return true if date belongs to that Calendar year
  * @return false if date DOES NOT belongs to that Calendar year
  */
    
 public boolean dateBelongsTo(int y) {
  
        if (this.year != y) return false;
        else return true;
 }

/**
  * is (m, y) a leap month?
  * 
     * @param m represents the month specified
  * @param y represents the year specified
  * @return true if it is a leap month
  * @return false otherwise
  */
 private static boolean isLeapMonth(int m, int y) {
  if (isLeapYear(y)) return ((m == 2) ? true : false);
  return false;
 }
        
        public Date previous(){
            if (isValid(month, day - 1, year)){
                this.day -=1;
  return this;
            }
            else if (isValid(month - 1, 1, year)){
                this.month -= 1;
                this.day = 1;
  return this;
            }
            else{
                this.day = 1;
                this.month =1;
                this.year -=1;
  return this;
            }
            //return this;
        }

 // return the next Date
 /**
  * adds a day and returns the same Date object
  * 
  * @return returns the same Date object adding a day
  */
 public Date next() {
  if (isValid(month, day + 1, year)){
            this.day +=1;
   return this;
        }
  else if (isValid(month + 1, 1, year)){
            this.month += 1;
            this.day = 1;
   return this;
        }
  else{
            this.day = 1;
            this.month =1;
            this.year +=1;
   return this;
        }
 }

 // is this Date after b?
 /**
  * compares two Date objects
  * 
  * @param b Date object
  * @return true if this Date is after Date b
  */
 public boolean isAfter(Date b) {
  return compareTo(b) > 0;
 }

 // is this Date a before b?
 /**
  * compares two date objects
  * 
  * @param b Date object
  * @return true if this Date is before Date b
  */
 public boolean isBefore(Date b) {
  return compareTo(b) < 0;
 }


 // comparison function between two dates
 /**
  * compares two Date objects
  * 
  * @param b    Date object
  * @return     0 if this Date is the same as Date b <br>
  *             negative integer if this Date is earlier than Date b <br>
  *             positive integer if this Date is after Date b
  */
 public int compareTo(Date b) {
  if (year != b.year)
   return year - b.year;
  if (month != b.month)
   return month - b.month;
  return day - b.day;
 }

 
 // advance date by number of months
 /**
  * advances the date by m months (fixed a bug on 2/22/2010)
  * 
  * @param m    represents the  months to advance
  * @return     modifies the same Date object)
  */
 public Date addMonths(int m) {
        int td;
  int tm = (month + (m % 12)) > 12 ? ((month + (m % 12)) % 12) : month
    + (m % 12);
  int ty = (month + (m % 12)) > 12 ? year + (m / 12) + 1 : year + (m / 12);
        td = day;
  if (isLeapYear(ty) && (day > DAYS[tm]))  td = DAYS[tm];
        if (!isLeapYear(ty) && tm == FEB && day > DAYS[tm] -1) td = DAYS[tm]-1;
        this.month = tm; this.day = td; this.year = ty;
        return this;
    }         
 
    // returns the number of days between two dates
 /**
     * @ param  endDate is the second date
  * @ return the number of days between two dates
     *          - 1 if start date is after the end date
     *          +ve #days if the start date is before end date
  * 
  */
 public int daysBetween(Date endDate) {

  if (this.isAfter(endDate)) return -1;
        int totDays = 0;
        for (int y = this.year; y < endDate.year; y++) 
   totDays += (isLeapYear(y) ? LEAP_YEAR : NON_LEAP_YEAR);
   
  int daysBeforeFirst = 0;
  for (int m = 1; m < this.month; m++)
   daysBeforeFirst +=  (m == 2 && !isLeapMonth(m, this.year)) ? DAYS[m]-1 : DAYS[m];
  daysBeforeFirst += this.day;

  int daysInSecond = 0;
  for (int me = 1; me < endDate.month; me++)
   daysInSecond += (me ==2 && !isLeapMonth(me, endDate.year) ? DAYS[me]-1  : DAYS[me]);
  daysInSecond += endDate.day; 
   
  return totDays - daysBeforeFirst + daysInSecond;
 }
 


 // return a string representation of this date
 /**
  * replaces the default toString of Object class
     * @override
  */
 public String toString() {
  return "[" + month + "-" + day + "-" + year + "]";
 }

    public void toString(String s){
        System.out.println("in a different toString\n");
    }


 /**
  * Code for testing the Date class
  * 
  * @param args Array of String arguments
  */

 public static void main(String[] args) {
        int count;
  Date today = new Date(1, 26, 2011);
        today.toString("cse");
  System.out.println(today);
  for (int i = 0; i < 14; i++) {
   today = today.next();
   System.out.println(today);
  }
        Date expiry = new Date(2011);
  System.out.println("testing 2011 as input:" + expiry);
        expiry = new Date(2012);
        System.out.println("testing 2012 as input:" + expiry);
        expiry = new Date(2, 2013);
        System.out.println("testing [2, 2013] as input:" + expiry);
        expiry = new Date(2, 2012);
        System.out.println("testing [2, 2012] as input:" + expiry);
        expiry = new Date(8, 2013);
        System.out.println("testing [8, 2013] as input:" + expiry);
        expiry = new Date(7, 2012);
        System.out.println("testing [7, 2012] as input:" + expiry);
        
                
  Date todayDate = new Date();
  System.out.println("todays date: " + todayDate);
  System.out.println("current month:" + todayDate.month);

        todayDate = new Date(2, 2010);
        System.out.println("todays date: " + todayDate);
  System.out.println("current month: " + todayDate.month);
        System.out.println("current day: " + todayDate.day);

        //testing dateBelongsTo method
        Date lease = new Date("08-01-2010");
  expiry = new Date("12-31-2011");
        Date expiry1 = new Date("1-01-2012");
        System.out.println(lease + " belongs to " + "2012: " + lease.dateBelongsTo(2012));
        System.out.println(lease + " belongs to " + "2010: " + lease.dateBelongsTo(2010));
        System.out.println(lease + " belongs to " + "2000: " + lease.dateBelongsTo(2000));
        System.out.println(expiry +  " belongs to " + "2011: " + expiry.dateBelongsTo(2011));
        System.out.println(expiry + " belongs to " + "2012: " + expiry.dateBelongsTo(2012));
        System.out.println(expiry + " belongs to " + "201: " + expiry.dateBelongsTo(201));
        System.out.println(expiry1 + " belongs to " + "2012: " + expiry1.dateBelongsTo(2012));
        System.out.println(expiry1 + " belongs to " + "2011: " + expiry1.dateBelongsTo(2011));
        System.out.println(expiry1 + " belongs to " + "2056: " + expiry1.dateBelongsTo(2056));

        lease = new Date("08-01-2010");
  expiry = new Date("08-01-2011");
        expiry1 = new Date("08-01-2012");

  // testing daysBetween
        System.out.println("\nTESTING daysBetween method\n------------------------------");
  count = lease.daysBetween(expiry);
  System.out.println("Days between "  + lease + " and " + expiry + "is: " + count);
        count = lease.daysBetween(expiry1);
        System.out.println("Days between "  + lease + " and " + expiry1 + "is: " + count);
  count = lease.daysBetween(new Date("12-31-2016"));
  System.out.println("Days between "  + lease + " and [12-31-2016] " + "is: " + count);
        count = lease.daysBetween(lease);
  System.out.println("Days between "  + lease + " and " + lease + "is: " + count);

        //testin isBefore
        System.out.println("\nTESTING isBefore method\n------------------------------");
        today = new Date();
        Date today1 = new Date();
        Date tomorrow = today1.next();
  System.out.println(today + " is before " + tomorrow + ": " + today.isBefore(tomorrow));
        System.out.println(tomorrow + " is before " + today + ": " + tomorrow.isBefore(today));
        System.out.println(today + " is before " + today + ": " + today.isBefore(today));
        
        //testing  addMonths
        System.out.println("\nTESTING addMonths method\n------------------------------");
        today = new Date("1-31-2011");
        today1 = new Date("1-31-2011");
        System.out.println("adding 1 months to " + today + " gives: " + today1.addMonths(1));
        today = new Date("1-31-2012");
        System.out.println("adding 1 months to " + today + " gives: " + new Date("1-31-2012").addMonths(1));
        System.out.println("adding 24 months to " + today + " gives: " + new Date("1-31-2012").addMonths(24));
        today = new Date("12-15-2012");
        System.out.println("adding 2 months to " + today + " gives: " + new Date("12-15-2012").addMonths(2));
        today = new Date("2-29-2012");
        System.out.println("adding 15 months to " + today + " gives: " + new Date("2-29-2012").addMonths(15));
        System.out.println("adding 23 months to " + today + " gives: " + new Date("2-29-2012").addMonths(23));
        System.out.println("adding 0 months to " + today + " gives: " + new Date("2-29-2012").addMonths(0));
        System.out.println("adding 48 months to " + today + " gives: " + new Date("2-29-2012").addMonths(48));
        
  //following will generate exception
        //System.out.println(lease.dateBelongsTo(-2));
  //today = new Date(13, 13, 2010);
        //expiry = new Date(13, 2012);
  // expiry = new Date("2-29-2009");
        // expiry = new Date("3-32-2009");
  // System.out.println(expiry); 
 }
}

]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat DateConstants.java
/*****************************************************************************
 @author Sharma Chakravarthy
 LANGUAGE   : Java version 6
 OS         : Windows 7 (Ultimate)
 PLATFORM   : PC
 Compiler   : javac
 
 CONCEPTS   : classes and methods
 PURPOSE    : defines the "Constants" interface
******************************************************************************/

/* These defaults should be used in your projects; let me know if something you need is missing */

public interface DateConstants
 {
  int     ABNORMAL_EXIT                 = 1; //static or final or both can be specified
  int     BASE_INDEX                    = 0;
  
  int     FIRST_MONTH                    = 1;
  int     FIRST_DAY                      = 1;
  int     LAST_MONTH                     = 12;
  int     FEB                            = 2;
  int     ZEROI                          = 0;
  int     ONEI                           = 1;
  int     TWOI                           = 2; 
 }
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat DateTime.java
/*************************************************************************
 *  Compilation:  javac DateTime.java <br>
 *  Execution:    java DateTime <br>
 *************************************************************************/

/**
 * A simple data type DateTime to be fleshed out for Project 1 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating DateTime objects (a la DATETIME type supported in Oracle)
 * 
 * @author skeleton developed by Sharma Chakravarhty 
 * @author To be completed by the student
 * @see java.util.Calendar
 * 
 */
public class DateTime {

 private Date date; // from Date Class
 private Time time; // from Time class
 
        /**
  * Constructor: default; returns today's date and time
  */
        public DateTime() {
            date = new Date();
            time = new Time();
        }
        
        public Date getDate(){
            return date;
        }
        
        public Time getTime(){
            return time;
        }
 /**
  * Constructor: Does bounds-checking to ensure object represents a valid
  * date and time
  * 
  * @param m    represents the month between 1 and 12
  * @param d    represents the date between 1 and the corresponding number
  *             from array DAYS
  * @param y    represents the year
  * @exception RuntimeException
  *                if the date is invalid
  */
 public DateTime(int mo, int d, int y, int h, int mi, int s, int hun) {
  date = new Date(mo, d, y);
                time = new Time(h, mi, s, hun);
 }

 /**
  * Constructor: Does bounds-checking to ensure string represents a valid
  * date
  * 
  * @param sDate    represents a date given in format mm-dd-yyyy,hh:mm:ss:hund as a string
  * @exception RuntimeException if the date is invalid
  */
 public DateTime(String sDateTime) {
  int m, d, y;
  String[] chopDateTime = sDateTime.split(",");
                //System.out.println(chopDateTime[0] + "," + chopDateTime[1]);
                date = new Date(chopDateTime[0]);
                time = new Time(chopDateTime[1]);
 }

    
 // is this DateTime after b?
 /**
  * compares two DateTime objects
  * 
  * @param b DateTime object
  * @return true if this DateTime is after DateTime b
  */
 public boolean isAfter(DateTime b) {
  if (this.compareTo(b) > 0)
                    return true;
        return false; 
 }

 // is this DateTime a before b?
 /**
  * compares two date objects
  * 
  * @param b DateTime object
  * @return true if this DateTime is before DateTime b
  */
 public boolean isBefore(DateTime b) {
  if (this.compareTo(b) <= 0)
            return true;
        return false; 
 }


 // comparison function between two dates
 /**
  * compares two DateTime objects
  * 
  * @param b    DateTime object
  * @return     0 if this DateTime is the same as DateTime b <br>
  *             negative integer if this DateTime is earlier than DateTime b <br>
  *             positive integer if this DateTime is after DateTime b
  */
 public int compareTo(DateTime b) {
  //need to flesh out
            //if (this.getDate().compareTo(b.getDate()) < 0)
            if (date.compareTo(b.date) < 0)
                return -1;
            else if (date.compareTo(b.date) > 0)
                return 1;
            if (date.compareTo(b.date) == 0){
                if(date.compareTo(b.date) < 0)
                    return -1;
                else if(time.compareTo(b.time) > 0)
                    return 1;
                     
                    return 0;
            }
            return 0; //not actually needed
 }

 
 // advance DateTime by days
 /**
  * advances the datetime by days
  * 
  * @param d    represents the  days to advance
  * @return     modifies the same DateTime object)
  */
 
        public DateTime addDays(int d){
            for (int i = 0; i < d; i++) 
                this.date.next();
            return this;  
 }
        
        public DateTime addMonths(int m){
            this.date.addMonths(m);
            return this;
        }
        
        public DateTime addYears(int y){
            this.date.addMonths(y*12);
            return this;
        }
        
        public DateTime addHours(int h){
            int overflow = this.time.addHours(h);
            if (overflow > 0)
                addDays(overflow);
            return this;
        }
        
        public DateTime addMinutes(int m){
            int overflow = this.time.addMinutes(m);
            if (overflow > 0) addDays(overflow);
      
            return this;   
 }
        
        public DateTime addSeconds(int s){
            int overflow = this.time.addSeconds(s);
            if(overflow > 0)
                addDays(overflow);
            return this;
        }

 // return a string representation of this date
 /**
  * replaces the default toString of Object class
         * @override
  */
 public String toString() {
            //need to flesh out
      
            return date + "," + time;
 }
        
    public DateTime addTime(Time t1){
            time.addTime(t1);
            return this;
    }
        
    public DateTime subtractTime(Time t1){
            time.subtractTime(t1);
            return this;
    }
        
    public DateTime addDateTime(DateTime date1){
            //add the date first
            addDays(date1.date.getDay());
            addMonths(date1.date.getMonth());
            addYears(date1.date.getYear());
            //add the time then and update the date if overflow happens
            int overflow = time.addTime(date1.time);
            if(overflow > 0)
                addDays(overflow);
            return this;
        }
        /*
         * sdas: This has been implemented as discussed below:
         * If first date is after the second date only then subtraction can go through
         * The days between the two days are evaluated
         * the days are added to the start of calender at 1-1-0 (mm-dd-yy) to find the subtracted date
         * subtract 29 as we have added 1 month and 1 day at the start
         * for subtracting time if first time is less than second
         * we find the difference from 2nd time to 1st time and subtract it from 23:59:59:0 and finally add 1 sec
         * one day is decremented as 1st time < 2nd time by using function previous in Date class
         * this function needs to be reevaluated critically
         */
        public DateTime subtractDateTime(DateTime date1){
            //subtracting the date first
            if(date.isBefore(date1.date)){
                System.out.println("Can not subtract");
                return this;
                
            }
            else{
                int daysBetwn = date1.date.daysBetween(date);
                System.out.println("Days between ="+daysBetwn);
                Date base = new Date(1,1,0);
                for(int i=0;i<daysBetwn-29;i++){
                    this.date = base.next();
                }
                //now subtract time
                if(this.time.isBefore(date1.time)){
                    date1.time.subtractTime(time);
                    //int overflow = 1;
                    Time t1 = new Time(23,59,59,0);
                    t1.subtractTime(date1.time);
                    this.time = t1;
                    this.time.addSeconds(1);
                    this.date.previous();
                    return this;
                }
                else{
                    this.time.subtractTime(date1.time);
                    return this;
                }
                
                //System.out.println("overflow ="+overflow);
                //return this;
            }
        }
 /**
  * Getter for bid year
  * 
  * @return returns year of bid
  */       
 public int getYear(){
   return date.getYear();          
 }
 /**
  * Code for testing the DateTime class
  * 
  * @param args Array of String arguments
  */

 public static void main(String[] args) {

        DateTime today = new DateTime();
     System.out.println("Testing no arg constructor: "+today);
    
        DateTime dateTime1 = new DateTime("2-28-2016,23:59:59:99");
        System.out.println("testing string as input:" + dateTime1);
        System.out.println("Adding 26 hrs to"+dateTime1+" gives "+dateTime1.addHours(26));
        
        DateTime dateTime2 = new DateTime("2-27-2017,23:59:00:00");
        System.out.println("Adding 24hrs to "+dateTime2+" gives "+dateTime2.addHours(24));
        System.out.println("Adding 7 min to "+dateTime2+ "gives "+dateTime2.addMinutes(7));
        
        dateTime2 = new DateTime("12-31-2013,11:30:00:00");
        System.out.println("Adding 13 hrs to "+dateTime2+" gives "+dateTime2.addHours(13));
        System.out.println("Adding 31 min to "+dateTime2+ "gives "+dateTime2.addMinutes(31));
        
        dateTime2 = new DateTime("1-1-2012,23:59:00:00");
        System.out.println("Adding 86400 sec to "+dateTime2+" gives "+dateTime2.addSeconds(86400));
        System.out.println("Adding 3600 sec to "+dateTime2+ "gives "+dateTime2.addSeconds(3600));
        
        DateTime dateTime3 = new DateTime("1-11-2014,23:59:57:00");
        System.out.println("Adding 4 sec to "+dateTime3+" gives "+dateTime3.addSeconds(4));
        
        dateTime1 = new DateTime(2,28,2015,12,30,30,0);
        System.out.println("testing 7 arg constructor with initial date: "+dateTime1);
        System.out.println("Increasing day by 366 "+dateTime1.addDays(366));
        System.out.println("Increasing  month by 12 "+dateTime1.addMonths(12));
        System.out.println("Increasing  year by 2 "+dateTime1.addYears(2));
        
        dateTime1 = new DateTime(2,28,2016,12,30,30,0);
        System.out.println("Initial date is "+dateTime1);
        System.out.println("Increasing day by 365 "+dateTime1.addDays(365));
        System.out.println("Increasing  month by 11 "+dateTime1.addMonths(11));
        System.out.println("Increasing  year by 30 "+dateTime1.addYears(30));
        
        dateTime2 = new DateTime(12,31,2013,12,45,30,0);
        dateTime3 = new DateTime(12,31,2013,12,45,29,99);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,30,2013,12,45,30,0);
        dateTime3 = new DateTime(12,31,2013,12,45,29,99);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,31,2012,12,45,30,0);
        dateTime3 = new DateTime(8,31,2013,12,45,29,99);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,31,2013,11,45,29,99);
        dateTime3 = new DateTime(12,31,2013,12,45,29,99);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,31,2013,12,44,59,0);
        dateTime3 = new DateTime(12,31,2013,12,45,0,0);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,31,2013,12,45,29,98);
        dateTime3 = new DateTime(12,31,2013,12,45,29,99);
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        dateTime2 = new DateTime(12,31,2013,13,50,30,0);
        dateTime3 = new DateTime("12-29-2014,12:45:29:0");
        
        System.out.println("checking "+dateTime2+" is before "+dateTime3+" gives "+dateTime2.isBefore(dateTime3));
        System.out.println("checking "+dateTime2+" is after "+dateTime3+" gives "+dateTime2.isAfter(dateTime3));
        
        System.out.println("Comparing dateTimes now");
        
        dateTime2 = new DateTime(12,31,2013,13,50,30,0);
        dateTime3 = new DateTime("12-29-2014,12:45:29:0");
        
        System.out.println("Comparing "+dateTime2+" with "+dateTime3+" gives "+dateTime2.compareTo(dateTime3));
        
        dateTime2 = new DateTime(12,31,2013,13,50,30,0);
        dateTime3 = new DateTime("12-29-2013,12:45:29:0");
        
        System.out.println("Comparing "+dateTime2+" with "+dateTime3+" gives "+dateTime2.compareTo(dateTime3));
        
        dateTime2 = new DateTime(12,29,2014,12,45,29,0);
        dateTime3 = new DateTime("12-29-2014,12:45:29:0");
        
        System.out.println("Comparing "+dateTime2+" with "+dateTime3+" gives "+dateTime2.compareTo(dateTime3));
        
        dateTime2 = new DateTime(12,29,2014,12,45,31,0);
        dateTime3 = new DateTime("12-29-2014,12:45:29:0");
        
        System.out.println("Comparing "+dateTime2+" with "+dateTime3+" gives "+dateTime2.compareTo(dateTime3));
        
        dateTime2 = new DateTime(12,29,2014,12,44,31,0);
        dateTime3 = new DateTime("12-29-2014,12:45:29:0");
        
        System.out.println("Comparing "+dateTime2+" with "+dateTime3+" gives "+dateTime2.compareTo(dateTime3));
        
        System.out.println("Adding dateTime");
        dateTime2 = new DateTime(1,20,2014,11,46,31,0);
        dateTime3 = new DateTime("2-20-2013,10:45:29:0");
        System.out.println(dateTime2+" + "+dateTime3);
        System.out.println(dateTime2.addDateTime(dateTime3));
        
        dateTime2 = new DateTime(8,31,2014,11,46,31,0);
        dateTime3 = new DateTime("7-31-2013,10:45:29:0");
        System.out.println(dateTime2+" + "+dateTime3);
        System.out.println(dateTime2.addDateTime(dateTime3));
        
        dateTime2 = new DateTime(8,31,2014,11,46,31,0);
        dateTime3 = new DateTime("7-31-2013,20:30:30:0");
        System.out.println(dateTime2+" + "+dateTime3);
        System.out.println(dateTime2.addDateTime(dateTime3));
        
        System.out.println("Subtracting dateTime");
        
        dateTime2 = new DateTime(6,21,2014,10,45,29,0);
        dateTime3 = new DateTime("4-20-2013,11:46:31:0");
        System.out.println(dateTime2+" - "+dateTime3);
        System.out.println(dateTime2.subtractDateTime(dateTime3));
        
        dateTime2 = new DateTime(4,20,2014,14,45,29,0);
        dateTime3 = new DateTime("5-21-2013,11:46:31:0");
        System.out.println(dateTime2+" - "+dateTime3);
        System.out.println(dateTime2.subtractDateTime(dateTime3));
 }
}

]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat[Kt Employee.java
/*****************************************************************************
 @author Sharma Chakravarthy
 LANGUAGE   : Java version 6
 OS         : Windows win 7 Ultimate
 PLATFORM   : PC
 Compiler   : javac
 
 CONCEPTS   : classes and methods
 PURPOSE    : defines an interface
******************************************************************************/

public interface Employee {  

 /**
  * Abstract class that needs to be overridden in WD, CS, and ACCT classes
  * calculates salary of unique objects
  * 
  * @param salaryParameter unique to the class its created from
  * @return age of current person       
  */
 public String computeSalary(int salaryParameter); //this cannot be static computed in Emp Type Class (ACCT,WD,CS)
 /**
  * 
  * Calculates the years of service of current employee
  * 
  * @return years of service      
  */
 public int lengthOfService();//computer in Salaried Employee Class
 /**
  * 
  * Formatted output for requirement 16
  * 
  * @return formated string for convention 16 output
  * 
  */
 public String printCalc(int month);
 
}
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Enterprise.java
/*************************************************************************
 *  Compilation:  javac Enterprise.java <br>
 *  Execution:    java Enterprise <br>
 *************************************************************************/

/**
 * A simple data type Enterprise for use in Project 2 (CSE 1325, Fall 2010)
 * <br>
 * Useful for creating Enterprise Objects  to hold Infromation of a Customers, employees
 * bids, name of enterprise, 
 * 
 * @author Scott Nidell 
 */

import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.Scanner;
public class Enterprise implements Proj3Constants, DateConstants{
  
 private String name; //name of enterprise
 private ArrayList<Item> items=new ArrayList<Item>(); //items currently up for auction
 private ArrayList<Item> soldItems=new ArrayList<Item>(); //items sold
 private ArrayList<SalariedEmp> employees= new ArrayList<SalariedEmp>(); //stores employees currently employed
 private ArrayList<SalariedEmp> releasedEmployees = new ArrayList<SalariedEmp>();//stores canned employees
 private ArrayList<Customer> customers; //stores customers of company
 private NumberFormat dollars= NumberFormat.getCurrencyInstance(Locale.US); //to make money pretty
 private enum SaleType{FIX_PRICE,AUCTION,BOTH};
 private int numEmployees=ZEROI; //current number of employees
 private int totalItemsSold=0;  //items sold by enterprise
 private double totalFees; //total fees collected 
 private double revenue;
 
 
 
 /**
  * Constructor: Creates a enterprise object that holds customers, employees, items, and bids
  * 
  * @param nm The name of the Enterprise
  */
 Enterprise(String nm){
   this.name=nm; 
   items=new ArrayList<Item> ();
   employees= new ArrayList<SalariedEmp>();
   customers= new ArrayList<Customer>();  
   
 }
 /**
  * Adds an employee to ArrayList
  * 
  * @param e Employee to be added
  */
 public void addEmployee(SalariedEmp e){
   
  
  if(e.getReleaseDate()==null){
    numEmployees++;
    employees.add(e);
  }else{
    System.out.println("Employee has a non-null release date, employee has been added releaseEmployees");
    releasedEmployees.add(e);
  }
 }
 
 /**
  * Adds an item to the ArrayList
  * 
  * @param it Item to be added to the list
  */
 public boolean addItem(Item it){
  
   for(int i=0;i<items.size();i++){
     if(it.getItemID()==items.get(i).getItemID()){
       System.out.println("ID currently in use choose a unique ID");
       return false;
     }
   }
   items.add(it);
   return true;   
 } 
 
 /**
  * Adds customers to ArrayList
  * 
  * @param c The Customer to be added
  */
 public void addCustomer(Customer c){
  
   //check for redundant ID
   for(int i=0;i<customers.size();i++){
     if(c.getID()==customers.get(i).getID()){
       System.out.println("ID currently in use choose a unique ID");       
     }
   }
   customers.add(c); 
 }
 
 /**
  * Releases a employee if it is not already released or exists
  * 
  * @param eid Employees ID to be released
  */
 public void releaseEmployee(int eid, String rdate){   
   int flag=0;
   SalariedEmp temp;
   //check active employees 
   
   for(int i=0;i<employees.size();i++){       
      if(employees.get(i).getID()==eid){
        if(employees.get(i).getReleaseDate()==null){
          employees.get(i).release(rdate);
          System.out.println("Employee has been found and released: "+employees.get(i));
          temp=employees.get(i);
          releasedEmployees.add(temp);//move this employee to releasedEmployees
          employees.remove(i);//remove from active employees
          numEmployees--;
          return;
        }                
      }      
    }
      //Check released Employees this person may have been released already
      for(int i=0;i<releasedEmployees.size();i++){
        if(releasedEmployees.get(i).getID()==eid){
        System.out.println("Employee Has already been released");
         System.out.println(releasedEmployees.get(i));
         return; 
        }
      }
      //Finally if its not in either let the user know
      System.out.println("Employee ID not found");  
 }
 /**
  * Prints the employee info with length of service
  * @param foutput PrintWriter to create new lines in file
  */
 public void printLenghtOfService(SalariedEmp e, PrintWriter foutput){
   foutput.println("------Newly Added Employee----------");
   foutput.println(e+" Age: "+e.age()+" Length of Service "+e.lengthOfService());
   foutput.println("\n");
 }
 
 /**
  * Prints the employee info with length of service
  * @param eid employee ID
  * @param foutput PrintWriter to create new lines in file
  */
 public void printLenghtOfService(int eid,PrintWriter foutput){
   if(eid==ZEROI){
    for(int i=0;i<employees.size();i++){
    foutput.println(employees.get(i)+" Age: "+employees.get(i).age()+" Length of Service "
                         +employees.get(i).lengthOfService());
    }
   }else{
    for(int i=0;i<employees.size();i++){
      if(eid==employees.get(i).getID()){
        foutput.println(employees.get(i)+" Age: "+employees.get(i).age()+" Length of Service "
                         +employees.get(i).lengthOfService());
      }
    }
   }
 }
 
 
 /**
  * Prints all current Employees
  * @param foutput PrintWriter to create new lines in file
  * 
  */
 public void printEmployees(PrintWriter foutput){
  foutput.println("\n"); 
   foutput.println("-----Employees currently employed"); 
  for(int i=0;i<employees.size();i++)
    foutput.println(employees.get(i));
   
 }
 
 /**
  * Prints all past Employees
  * @param foutput PrintWriter to create new lines in file
  * 
  */
 public void printPastEmployees(PrintWriter foutput){
  foutput.println("\n"); 
   foutput.println("----Employees who have been terminated"); 
  for(int i=0;i<releasedEmployees.size();i++)
    foutput.println(releasedEmployees.get(i));
   
 }
 
 /**
  * Prints all Items of the Enterprise
  * 
  */
 public void printItems(){
  
   for(int i=0;i<items.size();i++)    
     System.out.println(items.get(i));
   }
 
 /**
  * Prints all items given a lower bound range cost amount
  * 
  * @param val the lower bound range value
  */
 public void printItemsRange(int val){
   
   for(int i=0;i<items.size();i++){ 
     if(val<=items.get(i).getReserveAmount())
     System.out.println(items.get(i).printByReserve());
   }   
 }
  /**
  * Given Seller ID print all items associated with
  * seller ID
  * 
  * @param id Item Id to be printed bids
  * @param foutput PrintWriter to create new lines in file
  */
 public void printSellerItems(Item it, PrintWriter foutput){
   int occurence=ZEROI;
   foutput.println("\n----------");
   foutput.println("Current Items being sold by Seller:"+ it.getSellerID());
   for(int i=0;i<items.size();i++){
     if(items.get(i).getSellerID()==it.getSellerID()){
       occurence++;
       foutput.println("  Item "+occurence+"| "+items.get(i));
     }
   }
   foutput.println("\n\n");
   if(occurence==ZEROI){
     foutput.println("No items found for seller: "+it.getSellerID());
   }
 }
 
 /**
  * Prints all customers in the Enterprise
  *@param foutput PrintWriter to create new lines in file
  */
 public void printCustomers(PrintWriter foutput){
    foutput.println("----Printing All Current Customers----");
     for(int i=0;i<customers.size();i++)
       foutput.println(customers.get(i));
     foutput.println("\n\n");
 }
 
  /**
  * Adds a bid to item in the list
  * 
  * @param bid Bid to be added to Item List
  */
 public void addBid(Bid bid){
    
    int flag=0;
    for(int i=0;i<items.size();i++){
      if(items.get(i).getItemID()==bid.getItemID()){
        items.get(i).addBid(bid);
        flag++;
        return;
      }      
    }   
    if(flag==0)
      System.out.println("Item ID not found");
  }
 
  /**
  * Prints total Fees taken in dollar format
  * 
  */
 public void totalFees(){
    double totalCost=0;
    
    for(int i=0;i<items.size();i++){
     totalCost+= items.get(i).checkSold();
    }
    String dollarCost=dollars.format(totalCost);
    System.out.println("Total Fees collected: "+dollarCost);
  }
 
  /**
  * Print all bids given an Item ID
  * 
  * @param id Item Id to be printed bids
  * @param foutput Printwriter to print to file
  */
 public void printBids(int id, PrintWriter foutput){
   
    for(int i=0;i<items.size();i++){
      
      if(items.get(i).getItemID()==id){
        items.get(i).printBids(foutput);
        return;
      }
    }
  }
 
/**
  * Checks if an item was sold
  * if sold it moves item to itemsSold arraylist
  * 
  
  */
 
public void checkSold() {
  
  
//loop through items
  for(int i=0; i<items.size(); i++) {
    
   //if there is are no bids in item
    if(items.get(i).getBids().size() != 0){ 
      
    if("FIXED".equals(items.get(i).getType().toUpperCase())) { //if type is fixed
      
     if(items.get(i).getLastBid().getAmount() >= items.get(i).getReserve()) {       
       //get amount of last bid and see if it is more than reserve amount
      if(items.get(i).getQuantity() >= items.get(i).getLastBid().getQuantity()) {
        //if the quanity is greater than or equal to quanity of last bid
        
       totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());       
       items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());       
       totalItemsSold += items.get(i).getLastBid().getQuantity();       
       soldItems.add(items.get(i));
       
      }
      else {
        
       totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getQuantity());
       items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getQuantity());
       totalItemsSold += items.get(i).getQuantity();
       soldItems.add(items.get(i));
      }
       
     }
    }
    else if("BOTH".equals(items.get(i).getType())) {//if Both item
     if(items.get(i).getLastBid().getAmount() >= items.get(i).getReserve()) {
      if(items.get(i).getQuantity() >= items.get(i).getLastBid().getQuantity()) {
       totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
       items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
       totalItemsSold += items.get(i).getLastBid().getQuantity();
       soldItems.add(items.get(i));
      }
      else {
       totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getQuantity());
       items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getQuantity());
       totalItemsSold += items.get(i).getQuantity();
       soldItems.add(items.get(i));
      }
      
     }
    else {
     if(items.get(i).getLastBid().getAmount() >= ((items.get(i).getReserve()) * .95)) {
      totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
      items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
      totalItemsSold += items.get(i).getLastBid().getQuantity();
      soldItems.add(items.get(i));
     }
    //else
     //System.out.println("Bid: " + items.get(i).getLastBid() + " \nReserve Not Met");
     }
    }    
    else if("AUCTION".equals(items.get(i).getType())) {//If it is an Auction item process this way
     if(items.get(i).getLastBid().getAmount() >= ((items.get(i).getReserve()) * .95)) {
      totalFees += (items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
      items.get(i).setFinalValueFee(items.get(i).getLastBid().getAmount() * items.get(i).getLastBid().getQuantity());
      totalItemsSold += items.get(i).getLastBid().getQuantity();
      soldItems.add(items.get(i));
     }
    //else
     //System.out.println("Bid: " + items.get(i).getLastBid() + " \nReserve Not Met");
    }
    }
    
   }
  
 }
 
/**
  * gets revenue after the items have been checked
  *  
  * @param foutput Printwriter to print to file
  */
public void getRevenue(int year, String type,PrintWriter foutput){
  String num = dollars.format(revenue);
  revenue = 0;
  
  if(type.equals("*")) {
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year) {
      revenue += (soldItems.get(i).getInsertionFee() + soldItems.get(i).getFinalValueFee());
    }
   }
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year)
     foutput.println("All items sold: " + soldItems.get(i));
   }
   foutput.println("Revenue total for all items sold in the year " + year + ": " + num + "\n");
  }
  else if(type.toUpperCase().equals("FIXED")) {
    foutput.println("----------Fixed Items Sold-------------");
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year) {
      revenue += (soldItems.get(i).getInsertionFee() + soldItems.get(i).getFinalValueFee());
    }
   }
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year)
     foutput.println("    " + soldItems.get(i));
   }
   foutput.println("Total revenue for fixed items sold in year " + year + ": " + num + "\n");
  }
  else if(type.toUpperCase().equals("AUCTION")) {
    foutput.println("----------Auction Items Sold-------------");
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year) {
      revenue += (soldItems.get(i).getInsertionFee() + soldItems.get(i).getFinalValueFee());
    }
   }
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year)
     foutput.println("    " + soldItems.get(i));
   }
   foutput.println("Total revenue for auction items sold in year " + year + ": " + num + "\n");
  }
  else if(type.toUpperCase().equals("BOTH")) {
    foutput.println("----------Both Items Sold-------------");
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year) {
      revenue += (soldItems.get(i).getInsertionFee() + soldItems.get(i).getFinalValueFee());
    }
   }
   for(int i=0; i<soldItems.size(); i++){
    if((soldItems.get(i).getStartDate().getDate().getYear()) == year)
     foutput.println("    " + soldItems.get(i));
   }
   foutput.println("Total revenue for both auction and fixed items sold in year " + year + ": " + num + "\n");
  }
  
  foutput.println("\n\n");
 }
/**
  * Gets the items sold by person ID and that year
  *   
  * @param year  the year that items were sold
  * @param sid the seller ID
  * @param foutput Printwriter to print to file
  */
  public void soldItemsBySeller(int year, int sid,PrintWriter foutput){
   String revDollars = dollars.format(revenue);
   revenue = 0;
  foutput.println("---------------Sellers Details for ID: "+ sid+"---------------");
  foutput.println("-----Items put up for Auction for Year: "+year);
  for(int i=0; i<items.size(); i++) {
   if(items.get(i).getSellerID() == sid)
    if(items.get(i).getStartDate().getDate().getYear() == year)
     foutput.println(items.get(i));
  }
  for(int i=0; i<soldItems.size(); i++) {
   if(soldItems.get(i).getSellerID() == sid)
    if(soldItems.get(i).getStartDate().getDate().getYear() == year)
     foutput.println(soldItems.get(i));
  }
  foutput.println("------Items sold in Auction for Year: "+year);
  for(int i=0; i<soldItems.size(); i++) {
   if(soldItems.get(i).getSellerID() == sid) 
    if(soldItems.get(i).getStartDate().getDate().getYear() == year) {
     revenue += soldItems.get(i).getFinalValueFee();     
     foutput.println(soldItems.get(i) + "\n   Qty sold: " + 
      soldItems.get(i).getLastBid().getQuantity() +"\n    Item sold for: " + soldItems.get(i).getFinalValueFee());
   }
  }
  foutput.println("Total revenue " + sid + ": " + revDollars);
  }
  

 /**
  * prints all Bids for all Items
  * @param foutput PrinterWriter to write to file
  */ 
 public void printAllBids(PrintWriter foutput){
   
    for(int i=0;i<items.size();i++){ 
      
        items.get(i).printBids(foutput);        
    }    
  }
 
 /**
  * Prints Main menu for User Interface
  *
  */
 public void printMenu(){
    System.out.println(this);
    System.out.println("Welcome to MavBay!");
    System.out.println("Main Menu:");
    System.out.println(  "1) List all employees");
    System.out.println(  "2) List items");
    System.out.println(  "3) List all customers");
    System.out.println(  "4) Display items sold");
    System.out.println(  "5) Display total fee collection");
    System.out.println(  "6) Display Items that received max bid");
    System.out.println(  "7) Release an employee");
    System.out.println(  "0) Exit Program");    
  }
 
  /**
  * Prints a submenu for items
  * 
  */
  public void itemsMenu(){
    
    Scanner scan= new Scanner(System.in);
    String menuScan=EMPTY_STRING;
    
    System.out.println("Which items do you want to Display?");
    System.out.println("Type:* for all items");
    System.out.println("Give an amount and auction equal to or over that amount will be printed");
    
    menuScan=scan.next();
    int itemValue;
    
    if(menuScan.equals("*")){
      System.out.println("Printing All Items...");  
      this.printItems();
                 
    }else{
        try {
          itemValue = Integer.parseInt(menuScan);
          printItemsRange(itemValue);
          
          
        }catch (Exception e){       
          this.itemsMenu();
        }
    }
  }
  
  /**
  * Prints the Max Number of bids and the Item with that max bid
  * 
  */
  public void maxBid(){
   int maxBid=ZEROI;
   int index=ZEROI;
    for(int i=0;i<items.size();i++){     
      if(items.get(i).getNumBids()>maxBid){
        maxBid=items.get(i).getNumBids();
        index=i;
      }
    } 
   System.out.println("Item with most amount of Bids: "+items.get(index));
   System.out.println("Number of Bids: "+maxBid);
  }
  
 /**
  * Sub Menu to release and Employee
  *
  */
  public void releaseEmpMenu(){
   
   Scanner scan= new Scanner(System.in);
   String menuScan=EMPTY_STRING;
   int empIDSelection=ZEROI;
   
   System.out.println("Please enter an Emplyee ID to release");
   menuScan=scan.next();
   try {
          empIDSelection = Integer.parseInt(menuScan);
          this.releaseEmployee(empIDSelection, "*");
          
        }catch (Exception e){       
          System.out.println("Invalid input");
          this.releaseEmpMenu();
        }
    
  }
  
  
 
  /**
  * Prints items sold for proj2
  *
  */
  public void soldItemsMenu(String type, int year){
   
   
   System.out.println("1");
   //for(int i=0;i<items.size();i++){//time has eslapsed check to see if anything new has been sold
     //items.get(i).checkSold(); 
   //}   
   System.out.println("2");
   if(type.equals("*")){
     
     for(int i=0;i<items.size();i++){    
       if(this.items.get(i).getQtySold()>=ONEI){//if an item has been sold print it
         System.out.println(this.items.get(i));
       }
     }
     
   }else if(type.toUpperCase().equals(FIXED)){
     for(int i=0;i<items.size();i++){    
       if(this.items.get(i).getQtySold()>=ONEI && this.items.get(i).getType().equals(FIXED)){
         //if the item has been sold and its a Fixed Price. Print it.
         System.out.println(this.items.get(i));
       }
     }
     
   }else if(type.toUpperCase().equals(AUCTION)){
     for(int i=0;i<items.size();i++){    
       if(this.items.get(i).getQtySold()>=ONEI && this.items.get(i).getType().equals(AUCTION)){
       //if the item has been sold and its a Auction Price. Print it.
        System.out.println(items.get(i));
        }
      }     
   }else if(type.toUpperCase().equals(BOTH_ITEM)){
     for(int i=0;i<items.size();i++){
       if(this.items.get(i).getQtySold()>=ONEI && this.items.get(i).getType().equals(BOTH_ITEM)){
         System.out.println(items.get(i));
       }       
     }    
   }else{
    System.out.println("Invalid selection");    
   }
  }
  /**
  * Given Employee ID and overtime rate calculate salary of given Employee
  * 
  * @param eid Employee ID
  * @param otr overTime rate 
  */
  public void getSalary(int eid, int otr,int month,PrintWriter foutput){
    foutput.println("-----Calculating Salary");
    for(int i=0;i<employees.size();i++){       
      if(employees.get(i).getID()==eid){
        foutput.println(employees.get(i).printCalc(month)+"Monthly Salary: "+employees.get(i).computeSalary(otr));
        
        }                
      }    
  }
                         
  /**
  * A String method that represents a Enterprise Object
  * 
  * @return Returns a string of Enterprise Object
  */
  public String toString(){
    
    return "Enterprise: "+name+"Employees: "+numEmployees;     
  } 
  
 public static void main(String [] args){

   /***************Create EMPLOYEES***************/ 
 //Accountant(String fn,String ln, Date db, String gender, Date hd, String rd,double base, double hr)
 Date db1= new Date(3,14,1969);
 Date hd1= new Date(1,12,1999);
 Accountant acct1= new Accountant("Bill","Nye",db1,"Male",hd1,"08-01-2010",2100,21);
 Date db2= new Date(7,7,1977);
 Date hd2= new Date(3,15,2002);
 Accountant acct2= new Accountant("Soookie","Stackhouse",db2,"FeMale",hd2,"null",2800,21);
 
 Date db3= new Date(8,28,1983);
 Date hd3= new Date(2,3,2017);
 WebDesigner wd1= new WebDesigner("Scott","Nidell",db3,"Male",hd3,"null",2800,49);
 Date db4= new Date(1,7,1998);
 Date hd4= new Date(9,9,2009);
 WebDesigner wd2= new WebDesigner("Jessica","Hamby",db4,"FeMale",hd4,"09-02-2011",1100,22);
 
 Date db5= new Date(8,01,1988);
 Date hd5= new Date(1,3,2012);
 CSupport cs1= new CSupport("Dan","Peachtree",db5,"Male",hd5,"null",900,12);
 Date db6= new Date(1,7,1998);
 Date hd6= new Date(9,9,2009);
 CSupport cs2= new CSupport("Haley","Berry",db6,"FeMale",hd6,"null",900,12);
 
  /***********************Adding Employees to Enterprise****************/
 Enterprise myent= new Enterprise("Yo dog");  
 myent.addEmployee(acct1);
 myent.addEmployee(acct2);
 myent.addEmployee(wd1);
 myent.addEmployee(wd2);
 myent.addEmployee(cs1);
 myent.addEmployee(cs2);
 //myent.printEmployees();
 System.out.println(myent);
 
  /***********************Create Bids******************/
  int userID1=011;
  int itemID1=003;
  DateTime bidDate1= new DateTime("2-12-2014,00:00:45");
  double bidAmount1=200.00;
  int bidQTY1= 3;
  
  int userID2=012;
  int itemID2=120;
  DateTime bidDate2= new DateTime("2-13-2014,13:45:00");
  double bidAmount2=203.00;
  int bidQTY2= 3;
  
  int userID3=013;
  int itemID3=110;
  DateTime bidDate3= new DateTime("2-11-2014,11:00:00");
  double bidAmount3=900.00;
  int bidQTY3= 1;
  
  int userID4=014;
  int itemID4=190;
  DateTime bidDate4= new DateTime("2-11-2014,14:00:00");
  double bidAmount4=233.00;
  int bidQTY4= 9;
  
  Bid bid1= new Bid(userID1,itemID1,bidDate1,bidAmount1,bidQTY1);
  Bid bid2= new Bid(userID2,itemID2,bidDate2,bidAmount2,bidQTY2);
  Bid bid3= new Bid(userID3,itemID3,bidDate3,bidAmount3,bidQTY3);
  Bid bid4= new Bid(userID4,itemID4,bidDate4,bidAmount4,bidQTY4);
  
  /******************Create Items************************************/
  
    int itemID01= 003;
    String itemCat1= "Antique";
    String itName1="Camera";
    String itemType1= "FIX_PRICE";
    int itemQty1= 5;
    String condition1= "USED";
    double minStart1= 30.00;
    double bidInc1= 5.00;
    double reserveAmt1= 400.00;
    String startD1= "1-1-2014,21:49:00";
    int days1= 71;
    int sellerID1= 200;
    int feedback1=1000;
    String desc1= "Old Ass Camera"; 
    
    Item myItem1= new Item(itemID01,itemCat1,itName1,itemType1,itemQty1,condition1,minStart1,bidInc1,reserveAmt1,
                           startD1,days1,sellerID1,feedback1,desc1);
    
    
    int itemID02= 004;
    String itemCat2= "Antique";
    String itName2="Camera";
    String itemType2= "AUCTION";
    int itemQty2= 1;
    String condition2= "NEW";
    double minStart2= 35.00;
    double bidInc2= 5.00;
    double reserveAmt2= 450.00;
    String startD2= "1-5-2010,21:49:00";
    int days2= 2;
    int sellerID2= 200;
    int feedback2=1000;
    String desc2= "Old Ass Camera"; 
    
    Item myItem2= new Item(itemID02,itemCat2,itName2,itemType2,itemQty2,condition2,minStart2,bidInc2,reserveAmt2,
                           startD2,days2,sellerID2,feedback2,desc2);
 }
 
}
 
 
 
 
 
 
 
 
 
 ]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat En[K[K[K[K[K[Kcat Item.java
/*************************************************************************
 *  Compilation:  javac Item.java <br>
 *  Execution:    java Item <br>
 *************************************************************************/

/**
 * A simple data type Item for use in Project 2 (CSE 1325, Fall 2010)
 * <br>
 * Useful for creating Item objects to hold Infromation of an Item
 * Item ID, category, name, description, sale type, quanity, condition, minimum bid,
 * Increment, Reserve amount, Start date, number of days, seller ID, Feedback score
 * 
 * @author Scott Nidell 
 */
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
public class Item implements Proj3Constants,DateConstants{
  
  private enum Condition{NEW,USED};
  private enum SaleType{FIX_PRICE,AUCTION,BOTH};
  
  private int itemID;
  private String category;
  private String name;
  private SaleType type;
  private int qty;
  private int qtySold=ZEROI;
  private Condition condition;
  private double minStart;
  private double increment;
  private double reserveAmount;
  private DateTime startD;
  private int numDays;
  private int sellerID;
  private int feedback;
  private int shipID;
  private double finalValueFee=0;
  private String description;
  private ArrayList<Bid> bids = new ArrayList<Bid>();
  private DateTime endDate;
  private double insertionFee=0;  
  private double costCollected;
  
  /**
  * Constructor: Default constructor that builds a Item
  * with default values.
  */
  
  public Item(){
   this.itemID=ZEROI;
   this.category=null;
   this.name=DEFAULT_ITEM;
   this.qty=ZEROI;
   this.condition= Condition.NEW;
   this.minStart= ZEROD;
   this.increment= ZEROD;
   this.reserveAmount=ZEROD;
   this.startD= new DateTime();
   this.numDays= ZEROI;
   this.sellerID=ZEROI;
   this.feedback=ZEROI;
   this.description=null;
  }
  
  /**
  * Constructs Item given data
  * 
  * @param id       id of the item
  * @param cat      category of item
  * @param n        name of item
  * @param ty       sale type of Item
  * @param qt       quanity of items to be sold
  * @param cond     condition in terms of  a string
  * @param minS     minimum start of auction
  * @param inc      increment of bids
  * @param reserveA amount of item
  * @param sd       Start Date
  * @param sid      Seller ID
  * @param fb       Seller Feedback
  * @param desc     Description of Item
  * 
  */
  public Item(int id, String cat, String n, String ty, int qt, String cond, double minS,
               double inc, double reserveA, String sd, int nd,int sid, int fb,String desc){
    
   
    this.itemID=id;
    this.category=cat;
    this.name=n;
    if(!isValidType(ty))
      throw new RuntimeException("Item 1: error not valid item type");
    this.type= SaleType.valueOf(ty.toUpperCase());
    this.qty=qt;
    if(!isValidCond(cond))
      throw new RuntimeException("Item 2: error not valid item condition");
    this.condition= condition.valueOf(cond.toUpperCase());
    this.minStart= minS;
    this.increment=inc;
    this.reserveAmount=reserveA;
    this.startD= new DateTime(sd);
    this.numDays=nd;
    this.sellerID=sid;
    this.feedback=fb;
    this.description=desc;
    this.endDate=new DateTime(sd);
    this.endDate.addDays(nd);
  }
  
  /**
  * checks if a Sale type is valid
  * 
  * @return false if item does not fall in Enum sale type    
  * 
  */
  
  private static boolean isValidType(String t){
    
    if(t.toUpperCase().equals(FIXED)){
     return true;
   }else if(t.toUpperCase().equals(AUCTION)){
     return true;
   }else if(t.toUpperCase().equals(BOTH_ITEM)){
     return true;
   }else
     return false; 
  }
  
  
  
  /**
  * checks if a condition type is valid
  * 
  * @return false if item does not fall in Enum condition    
  */
  private static boolean isValidCond(String c){
    
    if(c.toUpperCase().equals(NEW)){
     return true;
   }else if(c.toUpperCase().equals(USED)){
     return true;
   }
     return false;
  }
  /**
  * returns the final value feee
  * 
  * @return final fee 
  */
  public double getFinalValueFee() {
  return this.finalValueFee;
 }
    
  /**
  * creates new description for Item
  * 
  * @param d new description of the item  
  * 
  */
  public void setDescription(String d){
    
    this.description=d;    
  }
  
  /**
  * Change quantity of Item
  * 
  * @param q new quanitity for the item
  *                
  */
  public void setQuanity(int q){
    
    this.qty=q;    
  }
  
  /**
  * Increase feedback of Item
  * 
  * @param fb amount of rating to be increased
  *                
  */
  public void increaseFeedback(int fb){
    
    this.feedback+=fb;  
  }
  
  /**
  * Decrease feedback of Item
  * 
  * @param fb amount of rating to be decreased
  *                
  */
  
  public void decreaseFeedback(int fb){
    
    this.feedback-=fb;    
  }
  
  /**
  * Returns the Quanity sold of this Item
  *
  * 
  * @return 0 to Max of the quanity sold of this item
  */
  public int getQtySold(){
    
   return qtySold; 
  }
  
  /**
  * Returns the String representation of a SaleType object of this Item
  * 
  * @param b DateTime object
  * @return String of the SaleType 
  */
  public String getType(){
    String typeConversion=EMPTY_STRING;
        
    if(this.type==SaleType.FIX_PRICE){
      typeConversion=FIXED1;
    }else if(this.type==SaleType.AUCTION){
      typeConversion=AUCTION;     
    }else if(this.type==SaleType.BOTH){
      typeConversion=BOTH_ITEM;     
    }    
    return typeConversion;    
  }
  
   /**
  * Returns a arrayList of Bids used for calculating revnue
  * 
  * @return   returns array list of bids
  */
 public ArrayList getBids() {
  return this.bids;
 }
 
 /**
  *Returns reserve amount used for revenue calculation
  * 
  * @return   returns the reserve price of an item
  */
 public double getReserve() {
  return this.reserveAmount;
 }
 /**
  *Returns reserve amount used in rev calculation
  * 
  * @return   returns the reserve price
  */
 public void setFinalValueFee(double fee) {
  this.finalValueFee = fee;
 }
 
 /**
  * Gets quanity of items being sold
  * 
  * @return   returns the quanity of item
  */
 public int getQuantity() {
  return this.qty;
 }
 
 /**
  * Returns last bid of the bids array
  * 
  * @return  returns the last bid in the bids array list
  */
 public Bid getLastBid() {
  int lastIndex = (this.bids.size() - ONEI);
  return this.bids.get(lastIndex);
 }
 
 /**
  *returns start date of item 
  * 
  * @returnreturns the DateTime an items auction started
  */
 public DateTime getStartDate() {
  return this.startD;
 }
 /**
  *returns insertionFee collctd
  * 
  * @return insertionFee
  */
 public double getInsertionFee() {
  return this.insertionFee;
 }
  
  /**
  * Adds a bid to the Arraylist
  * 
  * @param bid is the bid trying to be added
  */
  public void addBid(Bid bid){
    if(bids.size()>=MAX_BIDS){ //is bid less than 500?
      System.out.println("Max bids reached for this item");
      return;
    }else if(isValid(bid)){ //Is it valid?
      bids.add(bid);
    }else{
    System.out.println("Not a Valid Bid");
    //System.out.println("Bid Given: "+bid+" Previous bid: "+bids.get(i-1));
    }
    
  }
  
  /**
  * Returns the ID of the Item
  *
  * @return Int of the current item ID
  */
  public int getItemID(){
   
    return this.itemID;    
  }
  /**
  * Returns the ID of the Seller
  *
  * @return Int of the current sellerID
  */
  public int getSellerID(){
     return this.sellerID;
  }
  
  /**
  * Checks to see if a Bid is Valid
  * 
  * @param b Bid object beiung validated
  * @return true DateTime,QTY,and TYPE correct
  */
  public  boolean isValid(Bid b){
    int lastIndex=this.bids.size()-ONEI;
    if(!(b.getBidQty()<=this.qty))
        return false;
    if(this.bids.size()==ZEROI){//if this is the first bid going in
      if(b.getBidDate().isBefore(this.endDate)&& b.getBidDate().isAfter(this.startD)){
        //then check to see if the date is within the start and end date
        return true;        
      }
    }else if(this.bids.size()>=ONEI){//if there is at least one active bid
      if(b.getBidDate().isAfter(this.bids.get(lastIndex).getBidDate()) && b.getBidDate().isBefore(this.endDate)){
        //check to see if the date is after last bid
        return true;
      }else{
         return false; 
        }
    }
      
    if(this.type==SaleType.FIX_PRICE){
      if(b.getBidAmount()==this.reserveAmount && b.getBidQty()<=this.qty){        
        this.qty-=b.getBidQty();//because it is a valid item remove qty immediately
        this.qtySold=b.getBidQty(); //add to sold itemsQty        
        return true;
      }else{
        System.out.println("Invalid price or bid qty for FIXED item");
      }
    }else if(this.type==SaleType.AUCTION){ //if auction type
      if(this.bids.size()==ZEROI && b.getBidAmount()>=this.minStart){//if this is the first bid&its higher than min bid
        return true;
      }else if(this.bids.size()>ZEROI && b.getBidAmount()>=(this.bids.get(lastIndex).getBidAmount())+this.increment){
        //If bids>0 and new bid amount is higher than last bid +icnrement
        return true;
      }else{
       System.out.println("Invalid price for Auction item"); 
      }      
    }else if(this.type==SaleType.BOTH){//has attributes of fixed and auction type
      if(b.getBidAmount()==this.reserveAmount && b.getBidQty()<=this.qty){        
        this.qty-=b.getBidQty();//because it is a valid item remove qty immediately
        this.qtySold=b.getBidQty();         
        return true;
      }else if(this.bids.size()==ZEROI && b.getBidAmount()>=this.minStart){//if this is the first bid&its higher than min bid
        return true;
      }else if(this.bids.size()>ZEROI && b.getBidAmount()>=(this.bids.get(lastIndex).getBidAmount())+this.increment){
        //If bids>0 and new bid amount is higher than last bid +icnrement
        return true;
      }else{        
        System.out.println("Invalid price for Both item"); 
      }
      
    }else{     
      System.out.println("Invalid Type");
    }    
    return false;    
  }
  
  /**
  * Prints all bids in the Current Item
  * 
  */
  public void printBids(PrintWriter foutput){
   
    foutput.println("ItemID: "+this.itemID+"|Description: "+this.description);
    foutput.println("   CurrentBids:");
    for(int i=0;i<bids.size();i++){
     foutput.println("   "+bids.get(i));
    }
  }
  
  /**
  * Returns the ReserveAmount
  * 
  * @param double reserve amount
  */
  public double getReserveAmount(){
    return this.reserveAmount;
  }
  
  /**
  * Gets the End Date of the given Item
  *
  * @return String representation of End Date
  */
  public String getEndDate(){
    return this.endDate.toString();
  }
  
  /**
  * Check to See if any items have been sold in the time lapsed
  *
  * @return cost of fees collected
  */
  public double checkSold(){
   int lastIndex=this.bids.size()-ONEI;
    DateTime today= new DateTime();
   if(today.isAfter(this.endDate) && bids.get(lastIndex).getBidAmount()>= (this.reserveAmount*.95)){
     this.qty-=bids.get(lastIndex).getBidQty();
     this.qtySold+=bids.get(lastIndex).getBidQty();     
   }
    
   return this.calcCost(qtySold);
  }
  
  /**
  * Calculates the cost of bids processed in the Item
  * 
  * @param it quanity of of this item sold
  * @return Cost calculation of the quanity passed
  */
  public double calcCost(int it){
    int lastIndex=this.bids.size()-ONEI;
    double cost=ZEROI;
    double insertionFee= this.minStart*ONE_PERCENT;
    double finalValFee=  this.bids.get(lastIndex).getBidAmount()*TEN_PERCERNT;//fee if item is sold
    
    if(this.qtySold==ONEI){//fee for 1 item sold
      cost+= (SHIPPING_COST +finalValFee);      
    }else if(this.qtySold>ONEI){//fee for multiple items sold
      cost+= (SHIPPING_COST +finalValFee+((this.qtySold-ONEI)*MULTIPLE_FEE));
    }
      cost+=insertionFee;//everyone gets an insertion fee
      
   return cost; 
  }
  
  /**
  * Returns the number of bids in the current Item
  * 
  * @return int number of bids
  */
  public int getNumBids(){    
   return bids.size(); 
  }
  
  /**
  * A helper method that prints by Reserve price for easier reading
  *
  * @return String representation more easily read with reserveAmount in Front
  */
  public String printByReserve(){
   return "ReserveAmount: "+this.reserveAmount+" ID: "+this.itemID+" Description: "+this.description;
  }
  
  /**
  * A helper method that gets minStartBid
  *
  * @return minStart bid
  */
  public double getMinStart(){    
   return this.minStart; 
  }
  
  

  /**
  * Prints the current attributes of the object
  *   
  * @return string that describes the Item object.
  *                
  */
  public String toString(){
    
    return "{ID: "+this.itemID+"| Name: "+this.name+"| Description: "+this.description+"| QTY: "
      +this.qty+"|Condition: "+this.condition+" Auction TYPE: "+this.type+"|Min Start: "+this.minStart+"|Seller Feedback: "+this.feedback;   
  }
  
  public static void main(String []args){
    
    
    Item myItem= new Item();
    System.out.println(myItem);
   
    //Testing bids FIXED Auction
   /* int itemID= 003;
    String itemCat= "Antique";
    String itName="Camera";
    String itemType= "FIX_PRICE";
    int itemQty= 5;
    String condition= "USED";
    double minStart= 30.00;
    double bidInc= 5.00;
    double reserveAmt= 400.00;
    String startD= "1-1-2014,21:49:00";
    int days= 7;
    int sellerID= 200;
    int feedback=1000;
    String desc= "Old Ass Camera"; 
    
    Item myItem3= new Item(itemID,itemCat,itName,itemType,itemQty,condition,minStart,bidInc,reserveAmt,startD,days,sellerID,feedback,desc);
    
    System.out.println(myItem3);
    
    
  int userID1=120;
  int itemID1=003;
  DateTime bidDate1= new DateTime("2-12-2014,00:00:45");
  double bidAmount1=200.00;
  int bidQTY1= 3;
  
  int userID2=112;
  int itemID2=003;
  DateTime bidDate2= new DateTime("2-13-2014,13:45:00");
  double bidAmount2=207.00;
  int bidQTY2= 3;
  
  int userID3=111;
  int itemID3=003;
  DateTime bidDate3= new DateTime("2-11-2014,11:00:00");
  double bidAmount3=400.00;
  int bidQTY3= 1;
  
  int userID4=154;
  int itemID4=003;
  DateTime bidDate4= new DateTime("2-11-2014,14:00:00");
  double bidAmount4=401.00;
  int bidQTY4= 1;
  
  Bid bid1= new Bid(userID1,itemID1,bidDate1,bidAmount1,bidQTY1);
  Bid bid2= new Bid(userID2,itemID2,bidDate2,bidAmount2,bidQTY2);
  Bid bid3= new Bid(userID3,itemID3,bidDate3,bidAmount3,bidQTY3);
  Bid bid4= new Bid(userID4,itemID4,bidDate4,bidAmount4,bidQTY4);
  
  System.out.println("Adding bid1");
  myItem3.addBid(bid1);//not valid
  myItem3.addBid(bid2);//not valid
  myItem3.addBid(bid3);//valid
  myItem3.addBid(bid4);//not valid
  
  myItem3.printBids();
  System.out.println("QTY: "+myItem3.qty+" Sold Item: "+myItem3.qtySold);*/
  
     //*****************Testing bids Auction type****************
    /*
    int itemID= 003;
    String itemCat= "Antique";
    String itName="Camera";
    String itemType= "AUCTION";
    int itemQty= 5;
    String condition= "USED";
    double minStart= 30.00;
    double bidInc= 5.00;
    double reserveAmt= 400.00;
    String startD= "1-1-2014,21:49:00";
    int days= 7;
    int sellerID= 200;
    int feedback=1000;
    String desc= "Old Ass Camera"; 
    
    Item myItem3= new Item(itemID,itemCat,itName,itemType,itemQty,condition,minStart,bidInc,reserveAmt,startD,days,sellerID,feedback,desc);
    
    System.out.println(myItem3);
    
  
  int userID1=120;
  int itemID1=003;
  DateTime bidDate1= new DateTime("2-12-2014,00:00:45");
  double bidAmount1=20.00;
  int bidQTY1= 2;
  
  int userID2=112;
  int itemID2=003;
  DateTime bidDate2= new DateTime("2-13-2014,13:45:00");
  double bidAmount2=35.00;
  int bidQTY2= 2;
  
  int userID3=111;
  int itemID3=003;
  DateTime bidDate3= new DateTime("2-11-2014,11:00:00");
  double bidAmount3=32.00;
  int bidQTY3= 2;
  
  int userID4=154;
  int itemID4=003;
  DateTime bidDate4= new DateTime("2-11-2014,14:00:00");
  double bidAmount4=30.00;
  int bidQTY4= 3;
  
  int userID5=136;
  int itemID5=003;
  DateTime bidDate5= new DateTime("2-18-2014,14:00:00");
  double bidAmount5=40.00;
  int bidQTY5= 1;
  
  System.out.println("Size of bids list: "+myItem3.bids.size());
  Bid bid1= new Bid(userID1,itemID1,bidDate1,bidAmount1,bidQTY1);
  Bid bid2= new Bid(userID2,itemID2,bidDate2,bidAmount2,bidQTY2);
  Bid bid3= new Bid(userID3,itemID3,bidDate3,bidAmount3,bidQTY3);
  Bid bid4= new Bid(userID4,itemID4,bidDate4,bidAmount4,bidQTY4);
  Bid bid5= new Bid(userID5,itemID5,bidDate5,bidAmount5,bidQTY5);
  System.out.println("Number of bids: "+myItem3.bids.size());
  System.out.println("Adding bid1");
  
  myItem3.addBid(bid1);//invalid
  myItem3.addBid(bid2);//valid
  myItem3.addBid(bid3);//invalid
  myItem3.addBid(bid4);//invalid
  myItem3.addBid(bid5);//invalid
  
  System.out.println("Number of bids: "+myItem3.bids.size());
  
  
  myItem3.printBids();
  System.out.println("QTY: "+myItem3.qty+" Sold Item: "+myItem3.qtySold);  */
    
   int itemID= 003;
    String itemCat= "Antique";
    String itName="Camera";
    String itemType= "BOTH";
    int itemQty= 5;
    String condition= "USED";
    double minStart= 30.00;
    double bidInc= 5.00;
    double reserveAmt= 400.00;
    String startD= "1-1-2014,21:49:00";
    int days= 7;
    int sellerID= 200;
    int feedback=1000;
    String desc= "Old Ass Camera"; 
    
    Item myItem3= new Item(itemID,itemCat,itName,itemType,itemQty,condition,minStart,bidInc,reserveAmt,startD,days,sellerID,feedback,desc);
    
    System.out.println(myItem3);
    
  
  int userID1=120;
  int itemID1=003;
  DateTime bidDate1= new DateTime("2-12-2014,00:00:45");
  double bidAmount1=20.00;
  int bidQTY1= 2;
  
  int userID2=112;
  int itemID2=003;
  DateTime bidDate2= new DateTime("2-13-2014,13:45:00");
  double bidAmount2=35.00;
  int bidQTY2= 2;
  
  int userID3=111;
  int itemID3=003;
  DateTime bidDate3= new DateTime("2-11-2014,11:00:00");
  double bidAmount3=400.00;
  int bidQTY3= 2;
  
  int userID4=154;
  int itemID4=003;
  DateTime bidDate4= new DateTime("2-11-2014,14:00:00");
  double bidAmount4=55.00;
  int bidQTY4= 3;
  
  int userID5=136;
  int itemID5=003;
  DateTime bidDate5= new DateTime("2-18-2014,14:00:00");
  double bidAmount5=500.00;
  int bidQTY5= 1;
  
  System.out.println("Size of bids list: "+myItem3.bids.size());
  Bid bid1= new Bid(userID1,itemID1,bidDate1,bidAmount1,bidQTY1);
  Bid bid2= new Bid(userID2,itemID2,bidDate2,bidAmount2,bidQTY2);
  Bid bid3= new Bid(userID3,itemID3,bidDate3,bidAmount3,bidQTY3);
  Bid bid4= new Bid(userID4,itemID4,bidDate4,bidAmount4,bidQTY4);
  Bid bid5= new Bid(userID5,itemID5,bidDate5,bidAmount5,bidQTY5);
  System.out.println("Number of bids: "+myItem3.bids.size());
  System.out.println("Adding bid1");
  
  myItem3.addBid(bid1);//invalid
  myItem3.addBid(bid2);//valid auction
  myItem3.addBid(bid3);//valid Fixed
  myItem3.addBid(bid4);//invalid
  myItem3.addBid(bid5);//valid
  
  System.out.println("Number of bids: "+myItem3.bids.size());
  
  
  
  System.out.println("QTY: "+myItem3.qty+" Sold Item: "+myItem3.qtySold);
  System.out.println("StartDate:"+myItem3.startD+" End Date: "+myItem3.getEndDate());
  double cost= myItem3.checkSold();
  System.out.println("cost: "+cost);
  System.out.println("QTY: "+myItem3.qty+" Sold Item: "+myItem3.qtySold);
  }
  
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat MavBayMgmtTest.javca[K[Ka
/**
 * Programmer:  Sharma Chakravarthy
 * Language: Java
 * date:        09/10/2013
 * Purpose: This program uses MayBayMgmtTest class to read data from a text file to initialize
 *   employees, items for sale, customers who bid, and actual bids
 *     
 *              It checks and recovers from some exceptions while reading the input file
 * 
 * USAGE:       You need to initialize your data structures (creation of objects) as the first step. 
 *              once the values are read into local variables, 
 *              it  is YOUR responsibility to add code at proper places to create objects and manage them!
 *
 *              filename is given as a command line argument (e.g, java MayBayMgmtTest dataFile-proj2.txt)
 *              for the naming convention used in this file. if you forget to give the data 
 *              file as a command line argument, it will prompt you for that. 
 *          
 *              you can remove or comment out print staatements once you are sure it is reading the input correctly
 *
 * MAKE SURE:   your program is completely case in-sensitive (for gender, employee type etc.)
 */

import java.io.*;
import java.util.Scanner;

/**
 * @param fileName
 *            as input data filename containing input items with  as item separators
 *  Note that multiple interfaces can be used with a class
 */

public class MavBayMgmtTest implements Proj3Constants, DateConstants {

 // introduce your (class and instance) attributes (if needed) for this test class.
    // As i have indicated, it is preferable to have a MavBayMgmt class for the enterprise
    // and use this ONLY as a driver or test class
    // that way, this class can be removed to make your system a library!!

    private static BufferedReader finput;   //for reading from a file
    private static Scanner cp;              //this is still command prompt
    private static PrintWriter foutput;     //for writing to a file
    

    //define other variables as needed

    //Note that we are using a DIFFERENT method for reading input file;
 /**
  * @param iFileName is the input data file name
  */  

    public static BufferedReader openReadFile(String iFileName){
        BufferedReader bf = null;
        try{
            bf = new BufferedReader(new FileReader(iFileName));
        }     
        catch(FileNotFoundException FNFE){    
          bf = null;
        }
       finally{
          return bf;
       }
    }

/**
  * @param oFileName is the input data file name
  */  
    
    public static PrintWriter openWriteFile(String oFileName){
        PrintWriter outputFile = null;
        try{
            outputFile = new PrintWriter(new FileWriter(oFileName));
        }     
        catch(IOException IOE){    
          outputFile = null;
        }
       finally{
          return outputFile;
       }
    }
     

 /**
  * @param takes
  *           2 fineNames as command line argument. prompts if either is not given
  */
 public static void main(String[] args) {

  // declare variables used for input handling
        String enterprisename = DEFAULT_ENTERPRISE_NAME;
        String inputLine = EMPTY_STRING, ifName = EMPTY_STRING, ofName = EMPTY_STRING;
        int empID=0;

  // determine if input file is provided

  cp = new Scanner(System.in);
  if (args.length < 1) {
   System.out.println("Input Data file name was not supplied");
   System.out.printf("Please type input data file name: ");
   ifName = cp.nextLine();
  } 
        else if (args.length < 2){
            ifName =  args[ZEROI];
            System.out.println("Output file name was not supplied");       
            System.out.printf("Please type output file name: ");
            ofName = cp.nextLine();
        } else {
            ifName = args[ZEROI];
            ofName = args[ONEI];
            }

  // See HOW RECOVERY is done (will cover in a few weeks)

  finput = openReadFile(ifName);
  while (finput == null) {
   System.out.printf("Error: input data FILE %s %s", ifName,
     " does not exist.\nEnter correct INPUT data file name: ");
   ifName = cp.nextLine();
   finput = openReadFile(ifName);
  }
        foutput = openWriteFile(ofName);
        while (foutput == null){
   System.out.printf("Error: OUTPUT FILE %s %s",  ofName,  
                        " does not exist.\nEnter correct OUTPUT FILE name: ");
            ofName = cp.nextLine();
            foutput = openWriteFile(ofName);
  }  

        System.out.printf("Input data File: %s\nOutput File: %s\n\n", ifName, ofName);
        foutput.printf("Input data File: %s\nOutput File: %s\n\n", ifName, ofName); 

  /* GET MayBay DETAILS */
  // start reading from data file
  // get name
  try {
   inputLine = finput.readLine();
            System.out.println(inputLine);
   while (inputLine.charAt(BASE_INDEX) == '/'){
    inputLine = finput.readLine();
                System.out.println(inputLine);
            }
   String enterpriseName = inputLine;
   System.out.printf("\n%s %s \n", "Enterprise name is: ",
     enterpriseName);

            //MENU PROCESSING STARTS HERE!!!!
   System.out.printf("\nStarting Menu Processing: \n\n");
            foutput.println("\nStarting Menu Processing: \n\n");
          
          //read each line as before and process according to the menu number
            inputLine = finput.readLine();
            System.out.println(inputLine);
            foutput.println(inputLine);
   while (inputLine.charAt(BASE_INDEX) == '/'){
    inputLine = finput.readLine();
                System.out.println(inputLine);
                foutput.println(inputLine);
            }
            
            Scanner scan= new Scanner(System.in);
            String menuScan=EMPTY_STRING;
            Enterprise myEnt= new Enterprise(enterpriseName);
            
            
            while ( (!inputLine.toLowerCase().equals("end"))){
    String[] chopMenuLine = inputLine.split("!");

            switch (Integer.parseInt(chopMenuLine[ZEROI])){
            
            case 10: //for processing project 2 commands
                     // you can copy project 2 code here if you wish
                     //or make it a method processProj2Commands()  (a better alternative) and call
                     //it from here       
                    
             
                    while(!menuScan.equals("0")){
                      myEnt.printMenu();
                      menuScan=scan.next();
                    if(menuScan.equals("1")){
                      System.out.println("Listing All Employees...");
                      myEnt.printEmployees(foutput);                 
                     
                    }else if(menuScan.equals("2")){
                       myEnt.itemsMenu();                 
                     
                     }else if(menuScan.equals("3")){
                      System.out.println("Printing All Users...");
                      myEnt.printCustomers(foutput);
                 
                     }else if(menuScan.equals("4")){                 
                      myEnt.soldItemsMenu("*",2014);
                 
                     }else if(menuScan.equals("5")){
                      myEnt.totalFees();               
                   
                     }else if(menuScan.equals("6")){
                      myEnt.maxBid();
                 
                     }else if(menuScan.equals("7")){
                      myEnt.releaseEmpMenu();
                 
                     }else if(menuScan.equals("0")){
                      System.out.println("Exiting System"); 
                      System.exit(CLEAN_EXIT);
                     }else{
                      System.out.println("Invalid Selection\n"); 
                     }
                    }
                     break;
            case 11: // process new item information
                   
                     // get fields of a item from one line of input
                     // if you want to make it modular, you can create a
                     // method proceddHireEmp() and move the code there.
                     // you will have to adjust the visibility of variables!!
                    
                    int  itemId = Integer.parseInt(chopMenuLine[ONEI]);
                    String  itemCategory = chopMenuLine[TWOI];
                    String itemName = chopMenuLine[THREEI];
                    String itemSaleType = chopMenuLine[FOURI];
                    int itemQty = Integer.parseInt(chopMenuLine[FIVEI]);
                    String itemCondition = chopMenuLine[SIXI];
                    double itemMinStartBid = Double.parseDouble(chopMenuLine[SEVENI]);
                    double itemBidIncrement = Double.parseDouble(chopMenuLine[EIGHTI]);
                    double itemReserveAmt = Double.parseDouble(chopMenuLine[NINEI]);
                    String itemAuctionStartDate = chopMenuLine[TENI];
                    int    itemAuctionDays      = Integer.parseInt(chopMenuLine[ELEVENI]);
                    int    itemSellerId      = Integer.parseInt(chopMenuLine[TWELVEI]);
                    int    sellerFeedbackScore      = Integer.parseInt(chopMenuLine[THIRTEENI]);
                    String  itemDescription     = chopMenuLine[FOURTEENI];

                    System.out.printf("[%d, %s, %s, %s, %d, %s,  %f, %f, %f, %s, %d, %d, %d, %s]\n",
                        itemId,itemCategory,itemName,itemSaleType, itemQty, itemCondition,
                        itemMinStartBid,itemBidIncrement, itemReserveAmt, itemAuctionStartDate,
                        itemAuctionDays, itemSellerId, sellerFeedbackScore, itemDescription);
                    // add code here to create item object 
                    Item newItem= new Item(itemId,itemCategory,itemName,itemSaleType,itemQty,itemCondition,
                             itemMinStartBid,itemBidIncrement,itemReserveAmt,itemAuctionStartDate,itemAuctionDays,
                                   itemSellerId,sellerFeedbackScore,itemDescription);                    
                    
                    //Item ID is checked for redundancey in this method.
                    myEnt.addItem(newItem);
                    //List of Items put on sale by that seller so far
                    myEnt.printSellerItems(newItem,foutput);
                    
                    // convert strings to enum as needed //this is done in constructor
        
                    break;
            case 12:// process new customer information
                
                    int userId = Integer.parseInt(chopMenuLine[ONEI]);
                    String userFName = chopMenuLine[TWOI];
                    String userLName = chopMenuLine[THREEI];
                    String userDob = chopMenuLine[FOURI];
                    String userGender = chopMenuLine[FIVEI].toLowerCase();
                    String userAddress = chopMenuLine[SIXI];
                    String userState = chopMenuLine[SEVENI].toUpperCase();
                    String userZipcode = chopMenuLine[EIGHTI];
                
                    Date dobUser = new Date(userDob); //how to construct a Data object!
                   /* System.out.printf("{%d, %10s, %10s, %10s, %7s, %20s, %6s, %6s} \n",
                        userId, userFName, userLName,dobUser,  userGender, userAddress, 
                        userState, userZipcode);*/
                    // create a user object as appropriate
                    //Customer(int id,String firstName,String lastName,Date db,String gender, String ad,String st, String z)
                    //Gender Checked in constructor
                    Customer newCust= new Customer(userId,userFName,userLName,dobUser,userGender,userAddress,userState,
                                                   userZipcode);
                    //User ID redundancy checked when added.
                    myEnt.addCustomer(newCust);
                    //Output list of Customers So far
                    myEnt.printCustomers(foutput);
                     break;
            case 13://process hiring a new employee
            
                  String empType = chopMenuLine[ONEI].toUpperCase();
                  String empFName = chopMenuLine[TWOI];
                  String empLName = chopMenuLine[THREEI];
                  String empBDate = chopMenuLine[FOURI];
                  String empGender = chopMenuLine[FIVEI].toLowerCase();
                  String empHireDate = chopMenuLine[SIXI];
                  String empReleaseDate = chopMenuLine[SEVENI];
                  double empBaseSalary = Double.parseDouble(chopMenuLine[EIGHTI]);
                  double empRate = Double.parseDouble(chopMenuLine[NINEI]);

        // add code here: in order to convert a date string to a Date object,
        // invoke the appropriate constructor of the Date class (shown below)
        Date dob = new Date(empBDate); // dob is a local variable
        Date hd = new Date(empHireDate); // dob is a local variable

        /*System.out.printf("(%6s, %10s, %6s, %12s, %12s,  %10.2f, %4s, %12s)\n",
         empFName, empLName, empGender, empHireDate,empReleaseDate, empBaseSalary, empType, dob); */
         
        try{
        if(empType.toUpperCase().equals(WEBDESIGNER)){
          //WebDesigner(String fn,String ln, Date db, String gender, Date hd, String rd,double base, double otr)
          WebDesigner wd= new WebDesigner(empFName,empLName,dob,empGender,hd,empReleaseDate,empBaseSalary,empRate);          
          empID++;
          wd.setID(empID);
          myEnt.addEmployee(wd);
          //Outputs Emp ID along with other details including age and length of Service
          myEnt.printLenghtOfService(wd,foutput);          
          
        }else if(empType.toUpperCase().equals(ACCOUNTANT )){
          Accountant acct= new Accountant(empFName,empLName,dob,empGender,hd,empReleaseDate,empBaseSalary,empRate);
          empID++;
          acct.setID(empID);
          myEnt.addEmployee(acct);
           //Outputs Emp ID along with other details including age and length of Service
          myEnt.printLenghtOfService(acct,foutput);
        }else if(empType.toUpperCase().equals(CUSTOMER_SUPPORT)){
          CSupport cs= new CSupport(empFName,empLName,dob,empGender,hd,empReleaseDate,empBaseSalary,empRate);
          empID++;
          cs.setID(empID);
          myEnt.addEmployee(cs);
          //Outputs Emp ID along with other details including age and length of Service
          myEnt.printLenghtOfService(cs,foutput);
        }else{
          System.out.println("Invalid Employee Type");
        }
        }catch(RuntimeException RE){
          System.out.println("Bad Gender Type. Employee not added");
        }        
                    break;
   
            case 14:// accept a new bid
                         
                int bitemId = Integer.parseInt(chopMenuLine[ONEI]);
                int buserId = Integer.parseInt(chopMenuLine[TWOI]);
                String bidDateTime = chopMenuLine[THREEI];
                double bidAmount = Double.parseDouble(chopMenuLine[FOURI]);
                int bidQty = Integer.parseInt(chopMenuLine[FIVEI]);                
                //code added
                DateTime bidTime= new DateTime(bidDateTime);
                Bid bid= new Bid(buserId,bitemId,bidTime,bidAmount,bidQty);                
                //add bid checks for valididty
                myEnt.addBid(bid);
                //prints current bids on item so far
                myEnt.printBids(bitemId,foutput);
                    break;
            case 15:// terminate an employee
              
                int rempID= Integer.parseInt(chopMenuLine[ONEI]);
                String termDate = chopMenuLine[TWOI];
                //Release empployee
                myEnt.releaseEmployee(rempID, termDate);                
                //print current employees
                myEnt.printEmployees(foutput);
                //print fired employees
                myEnt.printPastEmployees(foutput);
                    break;
            case 16://compute monthly salary
                int eid= Integer.parseInt(chopMenuLine[ONEI]);
                int month = Integer.parseInt(chopMenuLine[TWOI]);
                int otr = Integer.parseInt(chopMenuLine[THREEI]);
                myEnt.getSalary(eid,month,otr,foutput);
                
                    break;
                    
            case 17:// compute length of service
              
                int eidl= Integer.parseInt(chopMenuLine[ONEI]);
                myEnt.printLenghtOfService(eidl,foutput);
                
                    break;
            case 18: // compute revenue
                
                String aType = chopMenuLine[ONEI];
                int bidYear = Integer.parseInt(chopMenuLine[TWOI]);
                myEnt.checkSold();
                myEnt.getRevenue(bidYear,aType,foutput);
                    break;
            case 19: // generate seller report
                int sid = Integer.parseInt(chopMenuLine[ONEI]);//sellerID
                int syear = Integer.parseInt(chopMenuLine[TWOI]);//Year
                myEnt.soldItemsBySeller(syear,sid,foutput);
                    break;
            case 0: //process exit
              System.out.println("Exiting System"); 
              System.exit(CLEAN_EXIT);
                    break;
            default: System.out.printf("unknown command: %s: SKIPPED\n", inputLine);
                    foutput.printf("unknown command: %s: SKIPPED\n", inputLine);
                    break;       
                     
            } 
            inputLine = finput.readLine();
            System.out.println(inputLine);
            foutput.println(inputLine);
   while (inputLine.charAt(BASE_INDEX) == '/'){
    inputLine = finput.readLine();
                System.out.println(inputLine);
                foutput.println(inputLine);
            }
        } 
         System.out.printf("Finished processing all commands. bye!"); 
         foutput.printf("Finished processing all commands. bye!");      
          // DO NOT REMOVE or DISTURB the REST OF THE CODE 

  } //try
        catch(NullPointerException NPE){
            System.out.println("null pointer exception: " + "\nPlease correct " + NPE.getMessage());
          } 
        catch (NumberFormatException NFE) {
   System.out.println("I/O Error in File: " + ifName + "\ncheck for: "
     + NFE.getMessage() + " and correct it in: " + inputLine);
    } 
        catch (RuntimeException RE) {
   System.out.println("Invalid Data error in File: " + ifName
     + "\nPlease correct " + RE.getMessage() + " in the file!" + inputLine);
    }
        catch(IOException IOE){
            System.out.println("input/output Data error in File: " + ifName + "\nPlease correct " + IOE.getMessage() + " in the file!" + inputLine);
          } 
        
        finally {
    foutput.close();
    }
 }//main
} // MavBayMgmtTest
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Person.java
/*************************************************************************
 *  Compilation:  javac Person.java <br>
 *  Execution:    java Person <br>
 *************************************************************************/

/**
 * A simple data type Person for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating Person objects to hold people info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
public abstract class Person implements Proj3Constants {
        
    
    private enum Gender{MALE,FEMALE};  
    String firstName;
    String lastName;
    Date dob;
    Gender gender;    
        
   public Person(String fn, String ln, String g,Date db) {
        lastName = ln;
        firstName=fn;
        if(!validGender(g))
          throw new RuntimeException("Employee 2: error not valid Gender type");
        gender= Gender.valueOf(g.toUpperCase());
        dob=db;
    }   
    
   /**
   * Checks to see if the String representation is a valid gender type
   * 
   * @param String to be validated
   * @return true if legal gender else false
   * 
   */ 
   private static boolean validGender(String g){
   
    if(g.toUpperCase().equals("MALE"))
      return true;
    if(g.toUpperCase().equals("FEMALE"))
      return true;
   
    return false;
 }
  
   /**
   * sets the first name
   * 
   * @param newName   new name to be updated
   * 
   */   
   public void changeFirst(String newName){
   
   this.firstName=newName;
 }

 /**
  * change the last name of customer
  * 
  * @param newName  new name to be updated            
  */
 public void changeLast(String newName){
   this.lastName=newName;
 }
 
 /**
  * Abstract class to be implmented in Employee and Customer
  * 
  * @return age of current person       
  */
 public abstract int age();
 
 /**
  * Prints out person format
  * @override overides object class
  * @return String that represents a Customer Object   
  */
 public String toString(){
    
   
   return "Person->"+firstName+" "+lastName+" Birthdate: "+dob+" Gender:"+gender;   
 }
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Proj3Constants.java
/*****************************************************************************
 @author Sharma Chakravarthy
 LANGUAGE   : Java version 6
 OS         : Windows 7 (Ultimate)
 PLATFORM   : PC
 Compiler   : javac
 ASSIGNED   : Spring 2013
 
 CONCEPTS   : classes and methods
 PURPOSE    : defines the "Constants" interface
******************************************************************************/

/* These defaults can be used in your projects; let me know if something 
you need is missing */

public interface Proj3Constants
 { 
  String  DEFAULT_ENTERPRISE_NAME       = "MayBay Auction House";
  
  String  EMPTY_STRING                  = "";
  int     DEFAULT_EMPLOYEE_NUMBER        = 0;
  int     DEFAULT_CUSTOMER_NUMBER        = 0;
  
  String  DEFAULT_FIRST_NAME             = "John";
  String  DEFAULT_LAST_NAME              = "Doe";
  String  DEFAULT_ITEM                   = "DEFUALT";
  double  MAX_SALARY                     = 30000.00;
  String  BUYERCLASS                     = "buyer";
  String  SELLERCLASS                    = "seller";
  String  BOTHCLASS                      = "both";
  
  String  WEBDESIGNER                    ="WD";
  String  ACCOUNTANT                     ="ACCT";
  String  CUSTOMER_SUPPORT               ="CUST_SUPPORT";
  
  String  FIXED1                         ="FIXED";
  String  FIXED                          ="FIX_PRICE";
  String  AUCTION                        ="AUCTION";
  String  BOTH_ITEM                      ="BOTH";
  
  String NEW                             ="NEW";
  String USED                            ="USED";
    
  int CLEAN_EXIT                         = 0;
  double ONE_PERCENT                     = .01;
  double NINETY_FIVE_PERCERNT            = .95;
  double SHIPPING_COST                   =  29.95;
  double MULTIPLE_FEE                    = 2.99;
  double TEN_PERCERNT                    = .10;
      
  double  ZEROD                          = 0.0;
  
  int     THREEI                         = 3;
  int     FOURI                          = 4;
  int     FIVEI                          = 5;
  int     SIXI                           = 6;
  int   SEVENI       = 7;
  int   EIGHTI       = 8;
  int   NINEI        = 9;
  int     TENI                           = 10;
  int     ELEVENI                        = 11;
  int     TWELVEI                        = 12;
  int     THIRTEENI                      = 13;
  int     FOURTEENI                      = 14;
  int   DAY_YEAR                         = 365;
  int   MAX_BIDS                         = 500;
 }
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat SalariedEmp.java
/*************************************************************************
 *  Compilation:  javac SalariedEmp.java <br>
 *  Execution:    java SalariedEmp <br>
 *************************************************************************/

/**
 * A abstract data type SalariedEmp for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating SalariedEmp objects to hold employee info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
public abstract class SalariedEmp extends Person implements Employee{
  
  int id=0;
  Date hireDate=null;
  Date releaseDate=null;
  double basePay=0; 
  
  public SalariedEmp(String firstName,String lastName,Date db,String gender,Date hd, String rd, double base) {
        super(firstName, lastName, gender,db);
        
        hireDate=hd;
        if(rd.equals("null")){
          releaseDate=null;
         }else{   
          releaseDate= new Date(rd); 
         }
         basePay=base;        
    }    
  /**
  * Raises the base pay of current employee
  * 
  * @return true if the new salary is not higher than max else false    
  */
  public boolean raisePay(double in){
    double checkpay= (basePay+in);
    if(checkpay<=MAX_SALARY){
     basePay+=in;
     return true;
    }
    return false;   
  }
  /**
  * Returns the ID of the current employee
  *     
  */
  public int getID(){
    return id;
  }
  /**
  * Gets the release date of employee
  * 
  * @return Date of release    
  */
  public Date getReleaseDate(){
     return releaseDate;
  }
  /**
  * Releases current employee sets release to today
  *  
  */
  public void release(String rdate){
    if(rdate.equals("*")){
      releaseDate= new Date();
    }else{
      releaseDate= new Date(rdate);
    }
    
  }
  /**
  * Sets Employee ID
  *  
  */
  public void setID(int nID){
   
    id=nID;
  }
  
   /**
  * Calculates the years of service of current employee
  * 
  * @return years of service      
  */
  public int lengthOfService(){
   
    Date today= new Date();
    return (hireDate.daysBetween(today)/DAY_YEAR);
  }
  
  /**
  * Calculates the age of the current person
  * 
  * @return age of current person       
  */
 public int age(){
   int age=0;
   Date today= new Date();
   age= (dob.daysBetween(today))/DAY_YEAR;
   return age;
 }
 
 public abstract String printCalc(int month);
  
}]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat Time.java
/*************************************************************************
 *  Compilation:  javac Time.java <br>
 *  Execution:    java Time <br>
 *************************************************************************/

/**
 * A simple time type (CSE 1325, Fall 2012)
 * <br>
 * Useful for creating Time objects
 * 
 * @author Sharma Chakravarhty (Sent the skeleton 08/25/2012)
 * @author extended by Yuanzhe Cai & Das (08/27/2012)
 * @see java.util.Calendar
 * @since 09/04/2012, Fixed a logical error to wrapping around 24 hour and add 
 *  addHour(), addMinute(), addSecond() (Cai)
 */

import java.util.Calendar;
import java.util.GregorianCalendar;

public class Time implements DateConstants{

	private  int hour; // hour (larger or equal to than 0)
	private  int minute; // minute (between 0 and 59)
	private  int second; // second (between 0 and 59)
	private  int hundredth; // hundredth (between 0 and 99)

	static private final int HOUR_CHANGE_TIME = 60 * 60 * 100;
	static private final int MINUTE_CHANGE_TIME = 60 * 100;
	static private final int SECOND_CHANGE_TIME = 100;
	static private final int HOURS_FOR_DAY = 24;

	/**
	 * Constructor: default; returns today's Time
	 */
	public Time() {
		GregorianCalendar c = new GregorianCalendar();
		hour = c.get(Calendar.HOUR); 
		minute = c.get(Calendar.MINUTE);
		second = c.get(Calendar.SECOND);
		hundredth = 0;
	}

	/**
	 * Constructor: create a time with a given hour, minute, second and
	 * hundredth ; fills in valid time;
	 * 
	 * @param hour
	 *            represents the hour
	 * @param minute
	 *            represents the minute between 0 and 59
	 * @param second
	 *            represents the second between 0 and 59
	 * @param hundredth
	 *            represents the hundredth between 0 and 99
	 */
	public Time(int hour, int minute, int second, int hundredth) {

		if (!isValid(hour, minute, second, hundredth))
			throw new RuntimeException("Time 1: Invalid time " + hour + ":" + 
                            minute + ":" + second + ":" + hundredth);

		this.hour = hour;
		this.minute = minute;
		this.second = second;
		this.hundredth = hundredth;
	}

/**
	 * Constructor: creates a valid time object with a string in hh:mm:ss format as a string;
	 * 
	 * @param hour
	 *            represents the hour
	 * @param minute
	 *            represents the minute between 0 and 59
	 */
	public Time(String aTime) {

        this(Integer.parseInt(aTime.split(":")[ZEROI]), 
                Integer.parseInt(aTime.split(":")[ONEI]), 
                Integer.parseInt(aTime.split(":")[TWOI]), ZEROI);	
	}

	// return hundredth
	/**
	 * change a time to hundredth;
	 * 
	 */
	private int timeToHundredth() {
		return this.hour * this.HOUR_CHANGE_TIME + this.minute
				* this.MINUTE_CHANGE_TIME + this.second
				* this.SECOND_CHANGE_TIME + this.hundredth;
	}

	// return hundredths
	/**
	 * change hundredths to a time;
	 * returns extra days obtained in that conversion
     * 
	 */
	private int hundredthToTime(int hundredths) {

		int tmpHour = ((int) (hundredths / this.HOUR_CHANGE_TIME));

		int tmpMinute = (int) (hundredths - tmpHour * this.HOUR_CHANGE_TIME)
				/ this.MINUTE_CHANGE_TIME;

		int tmpSecond = (int) (hundredths - tmpHour * this.HOUR_CHANGE_TIME - tmpMinute
				* this.MINUTE_CHANGE_TIME)
				/ this.SECOND_CHANGE_TIME;

		int tmpHundredth = hundredths - tmpHour * this.HOUR_CHANGE_TIME
				- tmpMinute * this.MINUTE_CHANGE_TIME - tmpSecond
				* this.SECOND_CHANGE_TIME;

		int daysToAdd = tmpHour / this.HOURS_FOR_DAY;
        tmpHour = tmpHour % this.HOURS_FOR_DAY;
        
		//if (!isValid(tmpHour, tmpMinute, tmpSecond, tmpHundredth))
		//	throw new RuntimeException("Time 2: Invalid time" + hour + ":" + minute + ":" + second + ":" + hundredth);

        this.hour = tmpHour;
        this.minute = tmpMinute;
        this.second = tmpSecond;
        this.hundredth = tmpHundredth;
		return daysToAdd;
	}

	// return add one hour
	/**
	 * add an hour and returns a new Time object
	 * 
	 * @return returns a new Time object adding an hour
	 */
	int addHours() {
		return addHours(1);
	}

	// return add hours
	// This approach does not support to add the negative values.
	/**
	 * adds hours and returns a new Time object
	 * 
	 * @return returns a new Time object adding hours
	 */
	int addHours(int hours) {

		if (hours < 0)
			throw new RuntimeException("Time 3: Invalid hours:" + hour);

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths + hours * this.HOUR_CHANGE_TIME;

		return hundredthToTime(hundredths);
	}

	// return add one minute
	/**
	 * add a minute and returns a new Time object
	 * 
	 * @return returns a new Time object adding an hour
	 */
	int addMinutes() {
		return addMinutes(1);
	}

	// return add minutes
	// This approach does not support to add the negative values.
	/**
	 * adds minutes and returns a new Time object
	 * 
	 * @return returns a new Time object adding minutes
	 */
	int addMinutes(int minutes) {

		if (minutes < 0)
			throw new RuntimeException("Time 4: Invalid minutes:" + minute );

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths + minutes * this.MINUTE_CHANGE_TIME;

		return hundredthToTime(hundredths);

	}

	// return add one second
	/**
	 * add a second and returns a new Time object
	 * 
	 * @return returns a new Time object adding an hour
	 */
	int addSeconds() {
		return addSeconds(1);
	}

	// return add seconds
	// This approach does not support to add the negative values.
	/**
	 * adds seconds and returns a new Time object
	 * 
	 * @return returns a new Time object adding seconds
	 */
	int addSeconds(int seconds) {

		if (seconds < 0)
			throw new RuntimeException("Time 5: Invalid seconds:" + second);

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths + seconds * this.SECOND_CHANGE_TIME;

		return hundredthToTime(hundredths);

	}

    int addHundredths() {
		return addHundredths(1);
	}

    int addHundredths(int hundredth) {

		if (hundredth < 0)
			throw new RuntimeException("Time 6: Invalid hundredths of a second" + hundredth);

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths + hundredth;

		return hundredthToTime(hundredths);

	}

	// is this Time after t?
	/**
	 * compares two Time objects
	 * 
	 * @param t
	 *            Time object
	 * @return true if this Time is after Time t
	 */
	public boolean isAfter(Time t) {
		return compareTo(t) > 0;
	}

	// is this Time before t?
	/**
	 * compares two Time objects
	 * 
	 * @param t
	 *            Time object
	 * @return true if this Time is after Time t
	 */
	public boolean isBefore(Time t) {
		return compareTo(t) < 0;
	}

	// comparison function between two Times
	/**
	 * compares two Time objects
	 * 
	 * @param t
	 *            Time object
	 * @return 0 if this Time is the same as Time t <br>
	 *         negative integer if this Time is earlier than Time t <br>
	 *         positive integer if this Time is after Time t
	 */
	public int compareTo(Time t) {
		if (this.hour != t.hour)
			return this.hour - t.hour;
		if (this.minute != t.minute)
			return this.minute - t.minute;
		if (this.second != t.second)
			return this.second - t.second;

		return this.hundredth - t.hundredth;
	}

	// substract of Times
	/**
	 * substract two Time objects
	 * 
	 * @param t
	 *            Time object
	 * @return new Time object
	 */
	int subtractTime(Time t) {

		if (t.isAfter(this)) {
			System.out.println("T2 is greater than T1; -1 is returned");
            return -1;
		}

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths - t.timeToHundredth();

		return hundredthToTime(hundredths);

	}

	// add  two Times
	/**
	 * add two Time objects
	 * 
	 * @param t
	 *            Time object
	 * @return new Time object
	 */
	int addTime(Time t) {

		int originalHundredths = timeToHundredth();

		int hundredths = originalHundredths + t.timeToHundredth();

		return hundredthToTime(hundredths);

	}

	// return a string representation of this Time
	/**
	 * replaces the default toString of Object class
	 */
	public String toString() {
		return "[" + this.hour + ":" + this.minute + ":" + this.second + ":"
				+ this.hundredth + "]";
	}

	/**
	 * Is the given time valid?
	 * 
	 * @param hour
	 *            , minute, second and hundredth
	 * @return false if hour exceeds 24 or is less than 1
	 * @return false if day exceeds the corresponding days for a month from
	 *         array DAYS
	 * @return false if the year is not a leap year and has 29 days
	 */
	private static boolean isValid(int hour, int minute, int second,
			int hundredth) {
		if (hour < 0 || hour > 24)
			return false;
		if (minute < 0 || minute > 60)
			return false;
		if (second < 0 || second > 60)
			return false;
		if (hundredth < 0 || hundredth > 99)
			return false;

		return true;
	}

	// return hour
	/**
	 * return hour
	 * 
	 */
	public int getHour() {
		return this.hour;
	}

	// return minute
	/**
	 * return minute
	 * 
	 */
	public int getMinute() {
		return this.minute;
	}

	// return second
	/**
	 * return second
	 * 
	 */
	public int getSecond() {
		return this.second;
	}

	// return hundredth
	/**
	 * return hundredth
	 * 
	 */
	public int getHundredth() {
		return this.hundredth;
	}

	public static void main(String[] args) {

		System.out.println("Test Default Constructor: ");

		Time current = new Time();
		System.out.println("Current Time is " + current);
		System.out.println("Current hour is " + current.getHour());
		System.out.println("Current minute is " + current.getMinute());
		System.out.println("Current second is " + current.getSecond());
		System.out.println("Current hundredth is " + current.getHundredth());

		System.out.println("\nTest Constructor (4 params): ");

		Time t1 = new Time(0, 20, 31, 12);
		System.out.println("Input t1 Time is " + t1);

		Time t2 = new Time(13, 0, 1, 1);
		System.out.println("Input t2 Time is " + t2);

		Time t3 = new Time(23, 59, 59, 99);
		System.out.println("Input t3 Time is " + t3);

		Time t4 = new Time(0, 0, 0, 0);
		System.out.println("Input t4 Time is " + t4);

        System.out.println("\nTest Constructor (hh:mm): ");

		t1 = new Time("10:34");
		System.out.println("Input t1 Time is " + t1);

		 t2 = new Time("13:45");
		System.out.println("Input t2 Time is " + t2);

		t3 = new Time("23:59");
		System.out.println("Input t3 Time is " + t3);

		t4 = new Time("0:1");
		System.out.println("Input t4 Time is " + t4);


		// testing addHours, addMinutes, addSeconds, and addHundredths
		System.out.println("\nTESTING add hour method");
		
		current = new Time(12, 59, 30, 99);
        System.out.println("Current Time: " + current);
        int daysToAdd = current.addHours();
		System.out.println("adding 1 hours to current means, adding: " + 
                    daysToAdd + " days and new time is: " + current);
        current = new Time(12, 59, 59, 99);
        System.out.println("Current Time: " + current);
		daysToAdd= current.addHours(14);
		System.out.println("adding 14 hours to current means, adding: " + 
                    daysToAdd + " days and new time is: " + current);
		
		System.out.println("\nTESTING addMinutes method");
		
		current = new Time(12, 59, 30, 99);
        System.out.println("Current Time: " + current);
        daysToAdd = current.addMinutes();
		System.out.println("adding 1 min to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);
		daysToAdd = current.addMinutes(1440);
		System.out.println("adding 1440 mins to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);
		
		System.out.println("\nTESTING addSeconds");
		current = new Time(23, 59, 59, 99);
        System.out.println("Current Time: " + current);
        daysToAdd = current.addSeconds();
		System.out.println("adding 1 sec to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);
		current = new Time(23, 59, 59, 99);
        System.out.println("Current Time: " + current);
        daysToAdd = current.addSeconds(86401);
		System.out.println("adding 86401 secs to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);
        
        System.out.println("\nTESTING addHundredths");
		current = new Time(12, 59, 59, 99);
        System.out.println("Current Time: " + current);
        daysToAdd = current.addHundredths();
		System.out.println("adding 1 hundredth to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);
		daysToAdd = current.addHundredths(10000);
		System.out.println("adding 10000 hundredths to current means, adding: " + 
                                daysToAdd + " days and new time is: " + current);

		// testing isAfter
		System.out.println("\nTESTING isAfter");
		t2 = new Time(23, 59, 59, 99);

		boolean isAfter = t2.isAfter(new Time(23, 59, 59, 99));
		System.out.println(t2 + " is after " + new Time(23, 59, 59, 99) + ": " + isAfter);

		t1 = new Time(23, 59, 59, 99);
        t2 = new Time(23, 59, 59, 98);
        System.out.println(t1 + " is after " + t2 + ":" + t1.isAfter(t2));

		// test isBefore
		System.out.println("\nTESTING isBefore");
		t1 = new Time(1, 20, 31, 12);
		t2 = new Time(0, 18, 11, 13);

		boolean isBefore = t2.isBefore(t1);
		System.out.println(t2 + " is before " + t1 + ": " + isBefore);

		t1 = new Time(1, 0, 0, 0);
		t2 = new Time(0, 59, 59, 59);
		System.out.println(t2 + " is before " + t1 + ": " + t2.isBefore(t1));

		t1 = new Time(0, 0, 0, 0);
		t2 = new Time(1, 59, 59, 59);
		isBefore = t2.isBefore(t1);
		System.out.println(t2 + " is before " + t1 + ": " + isBefore);

        t1 = new Time(0, 0, 0, 1);
		t2 = new Time(0, 0, 0, 2);
		System.out.println(t2 + " is before " + t1 + ": " + t2.isBefore(t1));

		// test subtractTime
		System.out.println("\nTESTING subtractTime");
		t1 = new Time(1, 58, 31, 12);
        t3 = new Time(1, 58, 31, 12);
		t2 = new Time(0, 58, 30, 11);
		int interval = t3.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + t3 + " and subtract " + interval + " days");

/*
		t1 = new Time(1, 20, 31, 12);
		t2 = new Time(0, 0, 0, 0);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

		t1 = new Time(23, 59, 59, 99);
		t2 = new Time(1, 59, 59, 99);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

		t1 = new Time(1, 0, 0, 0);
		t2 = new Time(0, 59, 59, 59);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

		t1 = new Time(0, 0, 0, 0);
		t2 = new Time(0, 0, 0, 0);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

        t1 = new Time(0, 0, 0, 5);
		t2 = new Time(0, 0, 0, 4);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

        t1 = new Time(0, 0, 0, 4);
		t2 = new Time(0, 0, 0, 5);
		interval = t1.subtractTime(t2);
		System.out.println(t1 + " - " + t2 + " is " + interval);

		System.out.println("\nTESTING addTime");
		t1 = new Time(1, 20, 31, 99);
		t2 = new Time(1, 1, 1, 1);
		Time totalTime = t1.addTime(t2);
		System.out.println(t1 + " + " + t2 + " is " + totalTime);

        t1 = new Time(23, 59, 59, 99);
		t2 = new Time(0, 0, 0, 1);
		totalTime = t1.addTime(t2);
		System.out.println(t1 + " + " + t2 + " is " + totalTime);

		t1 = new Time(1, 20, 31, 12);
		t2 = new Time(0, 0, 0, 0);

		totalTime = t1.addTime(t2);
		System.out.println(t1 + " add " + t2 + " is " + totalTime);

		t1 = new Time(1, 0, 0, 1);
		t2 = new Time(23, 59, 59, 99);
		totalTime = t1.addTime(t2);
		System.out.println(t1 + " add " + t2 + " is " + totalTime);

		t1 = new Time(23, 59, 59, 99);
		t2 = new Time(0, 0, 1, 0);
		totalTime = t1.addTime(t2);
		System.out.println(t1 + " add " + t2 + " is " + totalTime);

		t1 = new Time(1, 59, 59, 59);
		t2 = new Time(0, 1, 0, 0);

		totalTime = t1.addTime(t2);
		System.out.println(t1 + " add " + t2 + " is " + totalTime);

		t1 = new Time(0, 0, 0, 99);
		t2 = new Time(0, 0, 0, 1);

		totalTime = t1.addTime(t2);
		System.out.println(t1 + " add " + t2 + " is " + totalTime);
*/
		// test compareTo
		System.out.println("\nTESTING compareTo ");
		t1 = new Time(0, 0, 0, 99);
		t2 = new Time(0, 0, 0, 99);

		System.out.println(t1 + " compare to " + t2 + " is " + t1.compareTo(t2));

		t1 = new Time(23, 5, 8, 99);
		t2 = new Time(23, 5, 8, 98);

		System.out.println(t1 + " compare to " + t2 + " is " + t1.compareTo(t2));

		t1 = new Time(1, 4, 3, 34);
		t2 = new Time(8, 23, 13, 31);

		System.out.println(t1 + " compare to " + t2 + " is " + t1.compareTo(t2));

        //the following should generate exceptions
        //t1 = new Time(25, 0, 0, 0);
        //t2 = new Time(23, -2, 1, 0);
        //t2 = new Time(1, 1, 1, 100);
        
	}
}
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ cat WebDesigner.java
/*************************************************************************
 *  Compilation:  javac WebDesigner.java <br>
 *  Execution:    java WebDesigner <br>
 *************************************************************************/

/**
 * A simple data type WebDesigner for use in Project 3 (CSE 1325, Spring 2014)
 * <br>
 * Useful for creating WebDesigner objects to hold WebDesigner info
 * 
 * @author Scott Nidell  (3/12/2014) (
 */
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
public class WebDesigner extends SalariedEmp{ 
  
  double overTimeRate;
  private NumberFormat dollars= NumberFormat.getCurrencyInstance(Locale.US);
  
  WebDesigner(String fn,String ln, Date db, String gender, Date hd, String rd,double base, double otr){
    
    super(fn,ln,db,gender,hd,rd,base); //Salaried will build then Person will build from salaried
    overTimeRate=otr;    
  }
  
  /**
  * Overrides abstract method in Employee class to calculate salary
  * 
  * @return age of current person       
  */
  public String computeSalary(int otHours){
    String dollarCost=dollars.format(basePay+overTimeRate*otHours);    
    return dollarCost; //basePay declared in Superclass Inheritance at work.
  }
  
  // return a string representation of this WebDesigner
 /**
  * replaces the default toString of Object class
     * @override
  */
  public String toString(){    
   
   return "Web Designer->"+firstName+" "+lastName+" Birthdate: "+dob+" Gender:"+gender+" ID: "+id+" HireDate: "+
     hireDate+" Release Date: "+releaseDate+" basePay: "+basePay;   
 }
  public String printCalc(int month){    
   
   return "    ID: "+id+"|Emp Type: Web Designer|"+" First Name: "+firstName+" Last "+lastName+"|Gender: "+gender
     +" Month: "+month;    
 }
  
  public static void main(String args[]){
    Date dob= new Date(8,28,1983);
    Date hd= new Date(8,20,2004);
    
    
    WebDesigner myWD= new WebDesigner("Scott","Nidell",dob,"Male",hd,"null",2200,48);
    System.out.println(myWD);
    System.out.println(myWD.computeSalary(1));
    System.out.println(myWD.computeSalary(1));
  }
}

]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ javac *.java
]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ ls -l
[00mtotal 1184
-rw-r--r-- 1 san1465 students   1877 Mar 21 13:00 [00mAccountant.class[00m
-rw-r--r-- 1 san1465 students   1723 Mar 19 18:51 [00mAccountant.java[00m
-rw-r--r-- 1 san1465 students   2246 Mar 21 13:00 [00mBid.class[00m
-rw-r--r-- 1 san1465 students   3815 Mar 20 14:05 [00mBid.java[00m
-rw-r--r-- 1 san1465 students   1875 Mar 21 13:00 [00mCSupport.class[00m
-rw-r--r-- 1 san1465 students   1779 Mar 19 18:52 [00mCSupport.java[00m
-rw-r--r-- 1 san1465 students   2809 Mar 21 13:00 [00mCustomer.class[00m
-rw-r--r-- 1 san1465 students    970 Mar 21 13:00 [00mCustomer$Classification.class[00m
-rw-r--r-- 1 san1465 students   3756 Mar 19 14:46 [00mCustomer.java[00m
-rw-r--r-- 1 san1465 students    866 Mar 21 13:00 [00mCustomer$Status.class[00m
-rw-r--r-- 1 san1465 students   8807 Mar 13 08:41 [00mdataFile-proj3-final.txt[00m
-rw-r--r-- 1 san1465 students   6015 Mar 13 08:41 [00mdataFile-proj3-revised.txt[00m
-rw-r--r-- 1 san1465 students   7579 Mar 21 13:00 [00mDate.class[00m
-rw-r--r-- 1 san1465 students    387 Mar 21 13:00 [00mDateConstants.class[00m
-rw-r--r-- 1 san1465 students    997 Jan 28 14:41 [00mDateConstants.java[00m
-rw-r--r-- 1 san1465 students  14765 Mar 20 23:09 [00mDate.java[00m
-rw-r--r-- 1 san1465 students   7358 Mar 21 13:00 [00mDateTime.class[00m
-rw-r--r-- 1 san1465 students  15476 Mar 19 20:39 [00mDateTime.java[00m
-rw-r--r-- 1 san1465 students    197 Mar 21 13:00 [00mEmployee.class[00m
-rw-r--r-- 1 san1465 students   1120 Mar 19 18:31 [00mEmployee.java[00m
-rw-r--r-- 1 san1465 students  15100 Mar 21 13:00 [00mEnterprise.class[00m
-rw-r--r-- 1 san1465 students  25209 Mar 21 01:05 [00mEnterprise.java[00m
-rw-r--r-- 1 san1465 students    949 Mar 21 13:00 [00mEnterprise$SaleType.class[00m
-rw-r--r-- 1 san1465 students   8226 Mar 21 13:00 [00mItem.class[00m
-rw-r--r-- 1 san1465 students    852 Mar 21 13:00 [00mItem$Condition.class[00m
-rw-r--r-- 1 san1465 students  20141 Mar 21 00:16 [00mItem.java[00m
-rw-r--r-- 1 san1465 students    901 Mar 21 13:00 [00mItem$SaleType.class[00m
-rw-r--r-- 1 san1465 students   8340 Mar 21 13:00 [00mMavBayMgmtTest.class[00m
-rw-r--r-- 1 san1465 students  19350 Mar 21 01:06 [00mMavBayMgmtTest.java[00m
-rw-r--r-- 1 san1465 students   1543 Mar 21 13:00 [00mPerson.class[00m
-rw-r--r-- 1 san1465 students    850 Mar 21 13:00 [00mPerson$Gender.class[00m
-rw-r--r-- 1 san1465 students   2130 Mar 12 20:21 [00mPerson.java[00m
-rw-r--r-- 1 san1465 students   1652 Mar 21 13:00 [00mProj3Constants.class[00m
-rw-r--r-- 1 san1465 students   2597 Mar 19 21:48 [00mProj3Constants.java[00m
-rw-r--r-- 1 san1465 students   1472 Mar 21 13:00 [00mSalariedEmp.class[00m
-rw-r--r-- 1 san1465 students   2435 Mar 20 14:37 [00mSalariedEmp.java[00m
-rw-r--r-- 1 san1465 students 139264 Mar 21 13:00 [00mscott_nidell_project1_001.log[00m
-rw-r--r-- 1 san1465 students   7406 Mar 21 13:00 [00mTime.class[00m
-rw-r--r-- 1 san1465 students  17592 Feb  3 08:09 [00mTime.java[00m
-rw-r--r-- 1 san1465 students 370886 Mar 13 21:26 [00mUML_Proj3.~ml[00m
-rw-r--r-- 1 san1465 students 371092 Mar 17 17:48 [00mUML_Proj3.uml[00m
-rw-r--r-- 1 san1465 students   2337 Mar 21 13:00 [00mWebDesigner.class[00m
-rw-r--r-- 1 san1465 students   2191 Mar 19 18:34 [00mWebDesigner.java[00m
[m]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ java MavBayMgmtTest
Input Data file name was not supplied
Please type input data file name: ^^[[3~     dataFile-proj3-final.txt
Error: OUTPUT FILE   does not exist.
Enter correct OUTPUT FILE name: Results.txt
Input data File: dataFile-proj3-final.txt
Output File: Results.txt

// each item is separated by a ! do not add extra white spaces before or after separators
// Enterprise  Name
MavBay Corporation

Enterprise name is:  MavBay Corporation 

Starting Menu Processing: 

//actual # employees -- not needed any more!
// EMPLOYEE DETAILS: 1 LINE EACH; id is system generated!!
// emp type, fname, lname, dob, gender, hire date, release date, monthly base // salary
13!WD!katy!dough!07-01-1982!female!11-09-2006!null!1000.00!75.00
13!ACCT!sara!Longbottom!11-13-1980!male!01-02-2010!null!800.00!100.00
13!WD!john!smith!04-01-1978!male!04-07-2007!null!1000.00!96.00
13!CUST_SUPPORT!james!bond!12-10-1976!male!02-20-2005!null!800.00!20.00
13!CUST_SUPPORT!anne!haathaway!08-13-1984!female!10-24-2006!null!2000.00!25.00
13!ACCT!dave!richardson!04-15-1964!male!11-12-2005!null!1000.00!80.00
//item details: 1 LINE PER item AS GIVEN BELOW as menu; starts from 100 onwards
//Itemid!item category!item name!sale type!qty!Item
//condition!Minimum starting bid!bid Increment!Reserve
//amount!Start date and time in CST!Number of days!Seller
//id!seller feedback score!item description
11!100!Photography & Camera!Camera!FIX_PRICE!5!new!0.0!0.00!729.95!2-9-2013,21:49:00!7!1!9000!Canon EOS Rebel T3I 600D Body+4 Lens Kit 18-55 IS +75-300 +24GB Flash & More
[100, Photography & Camera, Camera, FIX_PRICE, 5, new,  0.000000, 0.000000, 729.950000, 2-9-2013,21:49:00, 7, 1, 9000, Canon EOS Rebel T3I 600D Body+4 Lens Kit 18-55 IS +75-300 +24GB Flash & More]
11!101!photography & camera!camera!AUCTION!10!used!300.00!20.00!700.00!2-10-2013,10:30:00!3!1!9000!Nikon D5100 16.2 MP Digital SLR Camera - Black Kit w/ AF-S VR 18-55mm
[101, photography & camera, camera, AUCTION, 10, used,  300.000000, 20.000000, 700.000000, 2-10-2013,10:30:00, 3, 1, 9000, Nikon D5100 16.2 MP Digital SLR Camera - Black Kit w/ AF-S VR 18-55mm]
11!102!photography & camera!camera!BOTH!5!new!100.00!10.00!160.00!2-11-2013,10:00:00!5!4!3000!Panasonic LUMIX DMC-ZS25 / DMC-TZ35 16.1 MP 20x Optical Zoom Digital Camera
[102, photography & camera, camera, BOTH, 5, new,  100.000000, 10.000000, 160.000000, 2-11-2013,10:00:00, 5, 4, 3000, Panasonic LUMIX DMC-ZS25 / DMC-TZ35 16.1 MP 20x Optical Zoom Digital Camera]
11!200!jewellery & watches!watch!FIX_PRICE!3!used!0.00!0.0!99.85!2-14-2013,9:30:00!2!4!4000!Invicta 1774 Men's Pro Diver Gold Tone Stainless Steel Chronograph Dive Watch
[200, jewellery & watches, watch, FIX_PRICE, 3, used,  0.000000, 0.000000, 99.850000, 2-14-2013,9:30:00, 2, 4, 4000, Invicta 1774 Men's Pro Diver Gold Tone Stainless Steel Chronograph Dive Watch]
11!201!jewellery & watches!watch!AUCTION!3!new!30.45!5.00!84.99!2-15-2013,19:30:00!4!3!3000!Invicta Specialty Chronograph Tachymeter Black Dial Stnls Steel NEW Mens Watch
[201, jewellery & watches, watch, AUCTION, 3, new,  30.450000, 5.000000, 84.990000, 2-15-2013,19:30:00, 4, 3, 3000, Invicta Specialty Chronograph Tachymeter Black Dial Stnls Steel NEW Mens Watch]
11!202!jewellery & watches!watch!BOTH!10!new!25.45!10.00!94.45!2-9-2013,23:00:00!2!6!3000!Invicta Specialty Chronograph Tachymeter Black Dial Stnls Steel NEW Mens Watch
[202, jewellery & watches, watch, BOTH, 10, new,  25.450000, 10.000000, 94.450000, 2-9-2013,23:00:00, 2, 6, 3000, Invicta Specialty Chronograph Tachymeter Black Dial Stnls Steel NEW Mens Watch]
11!300!clothing & accessories!shoe!BOTH!5!new!10.00!5.00!75.00!2-11-2013,00:00:59!3!7!1000!Nike Air Jordan Alpha Mens 12 Basketball Shoes. Blue Black White 392813-103
[300, clothing & accessories, shoe, BOTH, 5, new,  10.000000, 5.000000, 75.000000, 2-11-2013,00:00:59, 3, 7, 1000, Nike Air Jordan Alpha Mens 12 Basketball Shoes. Blue Black White 392813-103]
11!301!clothing & accessories!shoe!AUCTION!5!new!10.00!10.00!109.00!2-11-2013,12:00:00!3!7!1000!Reebok Realflex Transition 2 mens athletic running shoes
[301, clothing & accessories, shoe, AUCTION, 5, new,  10.000000, 10.000000, 109.000000, 2-11-2013,12:00:00, 3, 7, 1000, Reebok Realflex Transition 2 mens athletic running shoes]
11!302!clothing & accessories!shoe!FIX_PRICE!2!used!0.00!0.00!44.99!2-16-2013,12:00:00!2!7!6000!Adidas Originals Gazelle Men's Shoes Sneakers Canvas
[302, clothing & accessories, shoe, FIX_PRICE, 2, used,  0.000000, 0.000000, 44.990000, 2-16-2013,12:00:00, 2, 7, 6000, Adidas Originals Gazelle Men's Shoes Sneakers Canvas]
11!303!clothing & accessories!shoe!AUCTION!2!new!10.00!5.00!50.00!2-16-2013,11:00:00!2!7!6000!Adidas Originals Gazelle Men's Shoes Sneakers Canvas
[303, clothing & accessories, shoe, AUCTION, 2, new,  10.000000, 5.000000, 50.000000, 2-16-2013,11:00:00, 2, 7, 6000, Adidas Originals Gazelle Men's Shoes Sneakers Canvas]
// customers 1 line per user; from 1 to 99
// First Name!Last Name!User Id!Date of birth!gender!Address!State!Zipcode
12!1!Judy!Thompson!2-11-1965!FeMale!420 Love Lane Arlington!TX!76010
12!2!Joseph!richard!2-27-1991!male!1301 Mitchel Avenue!TX!76010
12!3!Subhash!Chand!1-14-1980!MALE!620 Michigan Avenue!DC!20064
12!4!David!Gotcher!3-1-1978!MaLe!320 East park row!DC!20098
12!5!Javed!Ali!8-30-1987!male!120 mesquite row!TX!76013
12!6!Barney!Stinson!1-1-1965!Female!701 Washington square!NY!10012
12!7!Ted!Mosby!9-23-1966!Male!702 Washington drive!NY!10013
12!8!Charlie!Sheen!11-30-1964!male!1915 Davis Trail!CA!94704
12!9!Jami!Pattinson!1-2-1993!female!176 berkeley blvd!CA!92345
12!10!Tobi!Wan!8-31-1988!male!1200 Dallas Parkway!TX!76154
//
13!CUST_SUPPORT!Julia!Roberts!08-13-1970!female!10-24-2000!null!1699.00!21.00
//Bids by customers; from 1st to last bid; each item at a time!
//Item id!User id!dateTime!bid amount!quantity
//more itmes for 2013
11!400!Photography & Camera!Camera!FIX_PRICE!10!new!0.0!0.00!500.00!2-9-2014,21:49:00!7!1!9000!Canon EOS Rebel T3I 600D Body +75-300 +24GB Flash & More
[400, Photography & Camera, Camera, FIX_PRICE, 10, new,  0.000000, 0.000000, 500.000000, 2-9-2014,21:49:00, 7, 1, 9000, Canon EOS Rebel T3I 600D Body +75-300 +24GB Flash & More]
11!401!photography & camera!camera!AUCTION!10!used!300.00!20.00!600.00!2-10-2014,10:30:00!3!1!9000!Nikon D5100 16.2 MP Digital SLR Camera - Black Kit w/ AF-S VR 18-55mm
[401, photography & camera, camera, AUCTION, 10, used,  300.000000, 20.000000, 600.000000, 2-10-2014,10:30:00, 3, 1, 9000, Nikon D5100 16.2 MP Digital SLR Camera - Black Kit w/ AF-S VR 18-55mm]
11!402!photography & camera!camera!BOTH!5!new!100.00!10.00!200.00!2-11-2014,10:00:00!5!4!3000!Panasonic LUMIX DMC FZ 40 16.1 MP 20x Optical Zoom Digital Camera
[402, photography & camera, camera, BOTH, 5, new,  100.000000, 10.000000, 200.000000, 2-11-2014,10:00:00, 5, 4, 3000, Panasonic LUMIX DMC FZ 40 16.1 MP 20x Optical Zoom Digital Camera]
11!500!jewellery & watches!watch!FIX_PRICE!2!used!0.00!0.0!99.85!2-14-2014,9:30:00!2!4!4000!Invicta 1774 Men's Pro Diver Gold Tone Chronograph Dive Watch
[500, jewellery & watches, watch, FIX_PRICE, 2, used,  0.000000, 0.000000, 99.850000, 2-14-2014,9:30:00, 2, 4, 4000, Invicta 1774 Men's Pro Diver Gold Tone Chronograph Dive Watch]
11!501!jewellery & watches!watch!AUCTION!3!new!20.00!5.00!84.99!2-15-2014,19:30:00!4!3!3000!Invicta Chronograph Black Dial Stnls Steel NEW Mens Watch
[501, jewellery & watches, watch, AUCTION, 3, new,  20.000000, 5.000000, 84.990000, 2-15-2014,19:30:00, 4, 3, 3000, Invicta Chronograph Black Dial Stnls Steel NEW Mens Watch]
11!502!jewellery & watches!watch!BOTH!10!new!125.45!10.00!194.45!2-9-2014,23:00:00!2!6!3000!Invicta Specialty Chronograph Black Dial Stnls Steel NEW Mens Watch
[502, jewellery & watches, watch, BOTH, 10, new,  125.450000, 10.000000, 194.450000, 2-9-2014,23:00:00, 2, 6, 3000, Invicta Specialty Chronograph Black Dial Stnls Steel NEW Mens Watch]
11!600!clothing & accessories!shoe!BOTH!5!new!50.00!5.00!115.00!2-11-2014,00:00:59!3!7!1000!Nike Air Jordan Alpha Mens 12 Basketball Shoes. Blue Black White 392813-103
[600, clothing & accessories, shoe, BOTH, 5, new,  50.000000, 5.000000, 115.000000, 2-11-2014,00:00:59, 3, 7, 1000, Nike Air Jordan Alpha Mens 12 Basketball Shoes. Blue Black White 392813-103]
11!601!clothing & accessories!shoe!AUCTION!6!new!20.00!10.00!119.00!2-11-2014,12:00:00!3!7!1000!Reebok Realflex Transition 2 mens athletic running shoes
[601, clothing & accessories, shoe, AUCTION, 6, new,  20.000000, 10.000000, 119.000000, 2-11-2014,12:00:00, 3, 7, 1000, Reebok Realflex Transition 2 mens athletic running shoes]
11!602!clothing & accessories!shoe!FIX_PRICE!2!used!0.00!0.00!55.99!2-16-2014,12:00:00!2!7!6000!Adidas Originals Gazelle Men's Shoes Sneakers Canvas
[602, clothing & accessories, shoe, FIX_PRICE, 2, used,  0.000000, 0.000000, 55.990000, 2-16-2014,12:00:00, 2, 7, 6000, Adidas Originals Gazelle Men's Shoes Sneakers Canvas]
// customers 1 line per user; from 1 to 99
15!5!4-23-2014
Employee has been found and released: Customer Support->anne haathaway Birthdate: [8-13-1984] Gender:FEMALE ID: 5 HireDate: [10-24-2006] Release Date: [4-23-2014] basePay: 2000.0
14!100!1!2-12-2013,00:00:45!729.95!1
14!100!9!2-15-2013,10:00:45!729.95!1
14!100!2!2-13-2013,13:45:00!729.95!2
Not a Valid Bid
16!1!5!20
16!2!5!30
16!3!5!10
16!4!5!3000
16!5!5!4500
16!6!5!27
16!7!5!5000
15!5!*
Employee Has already been released
Customer Support->anne haathaway Birthdate: [8-13-1984] Gender:FEMALE ID: 5 HireDate: [10-24-2006] Release Date: [4-23-2014] basePay: 2000.0
14!101!3!2-11-2013,11:00:00!500.00!2
14!101!4!2-11-2013,14:00:00!570.00!2
14!101!5!2-11-2013,17:00:00!590.00!3
14!101!4!2-12-2013,00:00:59!630.00!2
14!101!3!2-12-2013,03:00:00!650.00!2
14!101!5!2-12-2013,10:29:50!670.00!3
17!0
14!400!1!2-12-2014,00:00:45!500.00!1
14!400!9!2-15-2014,10:00:45!500.00!1
14!400!2!2-13-2014,13:45:00!500.00!2
Not a Valid Bid
18!fixed!2013
14!401!3!2-11-2014,11:00:00!500.00!2
14!401!5!2-11-2014,17:00:00!590.00!3
14!401!5!2-12-2014,10:29:50!650.00!3
18!auction!2013
18!both!2012
19!11!2013
19!1!2013
19!9!2013
19!2!2013
19!10!2013
14!102!5!2-12-2013,00:00:00!110.00!1
14!102!6!2-12-2013,01:00:00!120.00!2
14!102!5!2-12-2013,01:45:00!130.00!3
14!402!5!2-12-2014,00:00:00!150.00!1
14!402!6!2-12-2014,01:00:00!170.00!2
14!402!5!2-12-2014,01:45:00!190.00!3
14!102!6!2-12-2013,02:10:00!140.00!3
14!200!6!2-14-2013,12:00:00!99.85!1
14!200!7!2-14-2013,13:55:00!99.85!1
14!200!8!2-15-2013,14:00:00!99.85!1
14!201!9!2-15-2013,20:00:00!30.45!3
14!201!10!2-15-2013,21:00:00!40.45!3
14!201!9!2-15-2013,21:30:00!45.45!3
14!201!1!2-16-2013,00:05:00!60.00!3
14!201!10!2-16-2013,01:05:00!65.45!3
14!201!9!2-15-2013,01:06:00!72.00!3
Not a Valid Bid
14!201!10!2-15-2013,02:05:00!82.00!3
Not a Valid Bid
18!fixed!2013
18!auction!2013
18!BoTh!2013
14!202!9!2-9-2013,23:01:00!30.00!5
14!202!8!2-9-2013,23:55:00!50.00!5
14!202!9!2-10-2013,00:01:00!60.00!5
14!202!8!2-10-2013,01:01:00!80.00!5
14!202!1!2-10-2013,01:02:00!94.45!1
14!202!9!2-10-2013,13:01:00!90.00!5
14!202!3!2-10-2013,23:01:00!94.45!1
14!300!5!2-11-2013,01:01:00!30.00!2
14!300!6!2-11-2013,01:10:00!45.00!3
14!300!5!2-11-2013,01:30:00!55.00!2
14!300!6!2-11-2013,02:01:00!60.00!3
14!300!5!2-11-2013,03:01:00!69.00!2
14!300!4!2-12-2013,11:30:00!75.00!1
14!300!5!2-12-2013,19:25:00!75.00!1
14!301!3!2-11-2013,13:00:00!55.00!2
14!301!7!2-11-2013,14:00:00!65.00!2
14!301!3!2-11-2013,14:12:00!80.00!2
14!301!7!2-11-2013,14:50:00!95.00!2
14!301!3!2-11-2013,17:00:00!105.30!2
14!301!10!2-12-2013,13:00:00!109.00!1
14!302!2!2-16-2013,13:00:00!44.99!1
14!302!9!2-17-2013,00:30:00!44.99!1
14!303!1!2-16-2013,12:30:00!12.00!1
14!303!2!2-16-2013,13:30:00!17.99!1
14!303!2!2-16-2013,13:35:00!22.99!1
14!303!2!2-16-2013,14:30:00!28.99!1
18!fixed!2013
18!auction!2013
18!BoTh!2013
14!502!9!2-9-2014,23:01:00!130.00!5
14!502!8!2-9-2014,23:55:00!150.00!5
14!502!9!2-10-2014,00:01:00!160.00!5
14!502!8!2-10-2014,01:01:00!180.00!5
14!502!1!2-10-2014,01:02:00!194.45!1
14!502!9!2-10-2014,13:01:00!190.00!5
14!502!3!2-10-2014,23:01:00!194.45!1
14!600!5!2-11-2014,01:01:00!60.00!2
14!600!6!2-11-2014,01:10:00!75.00!3
14!600!5!2-11-2014,01:30:00!85.00!2
14!600!6!2-11-2014,02:01:00!90.00!3
14!600!5!2-11-2014,03:01:00!115.00!2
14!600!4!2-12-2014,11:30:00!112.00!1
14!600!5!2-12-2014,19:25:00!115.00!1
14!601!3!2-11-2014,13:00:00!55.00!2
14!601!7!2-11-2014,14:00:00!65.00!2
14!601!3!2-11-2014,14:12:00!80.00!2
14!601!7!2-11-2014,14:50:00!95.00!2
14!601!3!2-11-2014,17:00:00!105.30!2
14!601!10!2-12-2014,13:00:00!118.00!3
14!602!2!2-16-2014,13:00:00!55.99!1
14!602!9!2-17-2014,00:30:00!55.99!1
14!603!2!2-16-2014,14:30:00!28.99!1
Item ID not found
18!fixed!2014
18!auction!2014
18!BoTh!2014
19!21!2013
19!1!2013
19!2!2013
19!2!2013
19!4!2013
19!5!2013
19!6!2013
19!7!2013
19!8!2013
19!9!2013
19!10!2013
16!1!12!31
16!2!2!22
16!3!6!3
16!4!12!6000
16!6!5!19
16!7!1!10000
18!*!2013
17!0
15!1!4-30-2014
Employee has been found and released: Web Designer->katy dough Birthdate: [7-1-1982] Gender:FEMALE ID: 1 HireDate: [11-9-2006] Release Date: [4-30-2014] basePay: 1000.0
19!2!2014
19!4!2014
19!5!2014
19!6!2014
19!7!2014
end
Finished processing all commands. bye!]0;san1465@omega:~/CSE1325/Project3[san1465@omega Project3]$ exit
exit

Script done on Fri 21 Mar 2014 01:02:28 PM CDT
